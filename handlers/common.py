from aiogram import Router, types, Dispatcher, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from database.db import async_session
from database.models import User, Transaction, Review, PromoCode, Dispute, PhoneListing
from sqlalchemy import select, or_, func
from config import ADMIN_IDS
from sqlalchemy.ext.asyncio import AsyncSession
import logging
from aiogram.filters import Command
from datetime import datetime, timedelta
from aiogram.fsm.state import StatesGroup, State

router = Router()
logger = logging.getLogger(__name__)

class UserStates(StatesGroup):
    entering_promo = State()
    entering_withdrawal_amount = State()
    entering_usdt_address = State()

def get_main_keyboard(user_id: int = None):
    keyboard = [
        [
            KeyboardButton(text="üì± –ö—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä"),
            KeyboardButton(text="üì± –ü—Ä–æ–¥–∞—Ç—å –Ω–æ–º–µ—Ä")
        ],
        [
            KeyboardButton(text="üí≥ –ë–∞–ª–∞–Ω—Å"),
            KeyboardButton(text="üí≥ –í—ã–≤–æ–¥ –≤ USDT")
        ],
        [
            KeyboardButton(text="üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"),
            KeyboardButton(text="‚≠êÔ∏è –û—Ç–∑—ã–≤—ã")
        ],
        [
            KeyboardButton(text="‚öñÔ∏è –°–ø–æ—Ä—ã"),
            KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")
        ]
    ]
    
    if user_id in ADMIN_IDS:
        keyboard.append([KeyboardButton(text="üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")])
    
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_start_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")]],
        resize_keyboard=True
    )

def get_admin_keyboard():
    keyboard = [
        [
            KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            KeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        ],
        [
            KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
            KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥")
        ]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

async def check_user_registered(user_id: int) -> bool:
    async with async_session() as session:
        query = select(User).where(User.telegram_id == user_id)
        result = await session.execute(query)
        user = result.scalar_one_or_none()
        return user is not None

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        async with async_session() as session:
            user = await session.get(User, message.from_user.id)
            
            if not user:
                user = User(
                    telegram_id=message.from_user.id,
                    username=message.from_user.username,
                    created_at=datetime.utcnow(),
                    balance=0.0,
                    rating=5.0,
                    is_blocked=False
                )
                session.add(user)
                await session.commit()
                
                await message.answer(
                    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ROXORT!\n\n"
                    "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
                    reply_markup=get_main_keyboard(message.from_user.id)
                )
            else:
                await message.answer(
                    "üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ ROXORT!\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:",
                    reply_markup=get_main_keyboard(message.from_user.id)
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "ü§ñ ROXORT - –ë–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤\n\n"
        "üì± –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/buy - –ö—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä\n"
        "/sell - –ü—Ä–æ–¥–∞—Ç—å –Ω–æ–º–µ—Ä\n"
        "/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/dispute - –û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä\n"
        "/ratings - –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤\n\n"
        "‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
        "1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start\n"
        "2. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é\n\n"
        "‚ö†Ô∏è –í–∞–∂–Ω–æ:\n"
        "- –í—Å–µ —Å–¥–µ–ª–∫–∏ –∑–∞—â–∏—â–µ–Ω—ã\n"
        "–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É —Å–ø–æ—Ä–æ–≤\n"
        "- –†–µ–π—Ç–∏–Ω–≥ –≤–ª–∏—è–µ—Ç –Ω–∞ –¥–æ–≤–µ—Ä–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å"
    )
    await message.answer(help_text)

@router.message(lambda message: message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    async with async_session() as session:
        user = await session.get(User, message.from_user.id)
        
        if not user:
            await message.answer(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:",
                reply_markup=get_start_keyboard()
            )
            return
        
        tx_query = select(Transaction).where(
            or_(
                Transaction.buyer_id == user.telegram_id,
                Transaction.seller_id == user.telegram_id
            )
        )
        tx_result = await session.execute(tx_query)
        transactions = tx_result.scalars().all()
        
        sold_count = len([tx for tx in transactions if tx.seller_id == user.telegram_id and tx.status == "completed"])
        bought_count = len([tx for tx in transactions if tx.buyer_id == user.telegram_id and tx.status == "completed"])
        
        reviews_query = select(Review).where(Review.reviewed_id == user.telegram_id)
        reviews_result = await session.execute(reviews_query)
        reviews_count = len(reviews_result.scalars().all())
        
        await message.answer(
            f"üìä –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
            f"ID: {user.telegram_id}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone_number}\n"
            f"–†–µ–π—Ç–∏–Ω–≥: {'‚≠êÔ∏è' * round(user.rating)} ({user.rating:.1f})\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: {reviews_count}\n"
            f"–ë–∞–ª–∞–Ω—Å: {user.balance} USDT\n"
            f"–ü—Ä–æ–¥–∞–Ω–æ –Ω–æ–º–µ—Ä–æ–≤: {sold_count}\n"
            f"–ö—É–ø–ª–µ–Ω–æ –Ω–æ–º–µ—Ä–æ–≤: {bought_count}\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y')}",
            reply_markup=get_main_keyboard(message.from_user.id)
        )

@router.message(F.text == "üí≥ –ë–∞–ª–∞–Ω—Å")
async def show_balance(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        async with async_session() as session:
            user = await session.get(User, message.from_user.id)
            if not user:
                await message.answer(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.",
                    reply_markup=get_main_keyboard()
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            transactions_query = select(Transaction).where(
                or_(
                    Transaction.buyer_id == user.telegram_id,
                    Transaction.seller_id == user.telegram_id
                )
            )
            transactions_result = await session.execute(transactions_query)
            transactions = transactions_result.scalars().all()
            
            total_bought = sum(t.amount for t in transactions if t.buyer_id == user.telegram_id)
            total_sold = sum(t.amount for t in transactions if t.seller_id == user.telegram_id)
            
            response = f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance:.2f} ROXY\n\n"
            response += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            response += f"–ö—É–ø–ª–µ–Ω–æ –Ω–∞: {total_bought:.2f} ROXY\n"
            response += f"–ü—Ä–æ–¥–∞–Ω–æ –Ω–∞: {total_sold:.2f} ROXY\n"
            
            if user.balance >= 100:
                response += "\nüí° –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ USDT (–º–∏–Ω–∏–º—É–º 100 ROXY)"
            
            await message.answer(response, reply_markup=get_main_keyboard())
    except Exception as e:
        logger.error(f"Error in show_balance: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.",
            reply_markup=get_main_keyboard()
        )

@router.message(lambda message: message.text == "üì± –ö—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä")
async def start_buying(message: Message, state: FSMContext):
    if not await check_user_registered(message.from_user.id):
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=get_start_keyboard()
        )
        return
    
    from handlers.buying import show_services_message
    await show_services_message(message, state)

@router.message(lambda message: message.text == "üì± –ü—Ä–æ–¥–∞—Ç—å –Ω–æ–º–µ—Ä")
async def handle_sell(message: Message, state: FSMContext):
    if not await check_user_registered(message.from_user.id):
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=get_start_keyboard()
        )
        return
    
    from handlers.selling import start_selling
    await start_selling(message, state)

@router.message(lambda message: message.text == "üí∏ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞")
async def handle_withdraw(message: Message, state: FSMContext):
    if not await check_user_registered(message.from_user.id):
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=get_start_keyboard()
        )
        return
    
    async with async_session() as session:
        user = await session.get(User, message.from_user.id)
        if user.balance < 10:
            await message.answer(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.\n"
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 10 USDT",
                reply_markup=get_main_keyboard(message.from_user.id)
            )
            return
    
    await state.set_state("withdraw_amount")
    await message.answer(
        "üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–º–∏–Ω–∏–º—É–º 10 USDT):",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )

@router.message(F.text == "‚öñÔ∏è –°–ø–æ—Ä—ã")
async def show_disputes(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Ä–æ–≤"""
    try:
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–æ—Ä—ã, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
            disputes = await session.scalars(
                select(Dispute).where(
                    or_(
                        Dispute.buyer_id == message.from_user.id,
                        Dispute.seller_id == message.from_user.id
                    )
                ).order_by(Dispute.created_at.desc())
            )
            disputes = disputes.all()
            
            if not disputes:
                await message.answer(
                    "üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Ä–æ–≤.",
                    reply_markup=get_main_keyboard()
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø–æ—Ä–æ–≤
            text = "üìã –í–∞—à–∏ —Å–ø–æ—Ä—ã:\n\n"
            for dispute in disputes:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–æ—Ä–µ
                role = "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å" if dispute.buyer_id == message.from_user.id else "–ü—Ä–æ–¥–∞–≤–µ—Ü"
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                transaction = await session.get(Transaction, dispute.transaction_id)
                if not transaction:
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Å—Ç–∏–Ω–≥–µ
                listing = await session.get(PhoneListing, transaction.listing_id)
                if not listing:
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ç–æ—Ä–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
                other_party_id = dispute.seller_id if role == "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å" else dispute.buyer_id
                other_party = await session.get(User, other_party_id)
                
                text += (
                    f"ID —Å–ø–æ—Ä–∞: {dispute.id}\n"
                    f"–†–æ–ª—å: {role}\n"
                    f"–°–µ—Ä–≤–∏—Å: {available_services[listing.service]}\n"
                    f"–°—É–º–º–∞: {transaction.amount:.2f} ROXY\n"
                    f"–û–ø–ø–æ–Ω–µ–Ω—Ç: @{other_party.username or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n"
                    f"–°—Ç–∞—Ç—É—Å: {dispute.status}\n\n"
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ø–æ—Ä–∞
            keyboard = [
                [InlineKeyboardButton(text="‚öñÔ∏è –û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä", callback_data="open_dispute")],
                [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
            
            await message.answer(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
            
    except Exception as e:
        logger.error(f"Error in show_disputes: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–ø–æ—Ä–æ–≤.",
            reply_markup=get_main_keyboard()
        )

@router.message(lambda message: message.text == "‚≠êÔ∏è –û—Ç–∑—ã–≤—ã")
async def handle_reviews(message: Message):
    if not await check_user_registered(message.from_user.id):
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=get_start_keyboard()
        )
        return
    
    from handlers.ratings import show_reviews
    await show_reviews(message)

@router.message(lambda message: message.text == "üîë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def handle_admin_panel(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_main_keyboard(message.from_user.id)
        )
        return
    
    from handlers.admin import show_admin_panel
    await show_admin_panel(message)

@router.message(lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def handle_cancel(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        await state.clear()
    
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_keyboard(message.from_user.id)
    )

@router.message(lambda message: message.text and message.text.startswith("üí∏"))
async def handle_withdraw_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace("üí∏", "").strip())
        if amount < 10:
            await message.answer(
                "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 10 USDT\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
                    resize_keyboard=True
                )
            )
            return
        
        async with async_session() as session:
            user = await session.get(User, message.from_user.id)
            if user.balance < amount:
                await message.answer(
                    "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É:",
                    reply_markup=ReplyKeyboardMarkup(
                        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
                        resize_keyboard=True
                    )
                )
                return
            
            user.balance -= amount
            await session.commit()
        
        await state.clear()
        await message.answer(
            f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount} USDT —Å–æ–∑–¥–∞–Ω–∞.\n"
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=get_main_keyboard(message.from_user.id)
        )
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
                resize_keyboard=True
            )
        )

@router.message(F.text == "üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥")
async def activate_promo(message: types.Message, state: FSMContext):
    if not await check_user_registered(message.from_user.id):
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:",
            reply_markup=get_main_keyboard()
        )
        return
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_promo")
        ]])
    )
    await state.set_state(UserStates.entering_promo)

@router.message(UserStates.entering_promo)
async def process_promo(message: types.Message, state: FSMContext):
    code = message.text.upper()
    
    async with async_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        promo = await session.scalar(
            select(PromoCode).where(PromoCode.code == code)
        )
        
        if not promo:
            await message.answer(
                "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_promo")
                ]])
            )
            return
        
        if promo.is_used:
            await message.answer(
                "‚ùå –≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.",
                reply_markup=get_main_keyboard(message.from_user.id)
            )
            await state.clear()
            return
        
        if promo.expires_at and promo.expires_at < datetime.utcnow():
            await message.answer(
                "‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç–µ–∫.",
                reply_markup=get_main_keyboard(message.from_user.id)
            )
            await state.clear()
            return
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        user = await session.get(User, message.from_user.id)
        user.balance += promo.amount
        promo.is_used = True
        promo.used_by = message.from_user.id
        
        await session.commit()
        
        await message.answer(
            f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
            f"–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ {promo.amount} ROXY",
            reply_markup=get_main_keyboard(message.from_user.id)
        )
        await state.clear()

@router.callback_query(lambda c: c.data == "cancel_promo")
async def cancel_promo(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_main_keyboard(callback.from_user.id)
    )

@router.message(F.text == "üí≥ –í—ã–≤–æ–¥ –≤ USDT")
async def start_withdraw(message: types.Message, state: FSMContext):
    if not await check_user_registered(message.from_user.id):
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:",
            reply_markup=get_main_keyboard()
        )
        return
    
    async with async_session() as session:
        user = await session.get(User, message.from_user.id)
        if user.balance < 100:
            await message.answer(
                "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: 100 ROXY\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance} ROXY",
                reply_markup=get_main_keyboard(message.from_user.id)
            )
            return
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ ROXY (–º–∏–Ω–∏–º—É–º 100):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_withdraw")
        ]])
    )
    await state.set_state(UserStates.entering_withdrawal_amount)

@router.message(UserStates.entering_withdrawal_amount)
async def process_withdraw_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount < 100:
            await message.answer(
                "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: 100 ROXY\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_withdraw")
                ]])
            )
            return
        
        async with async_session() as session:
            user = await session.get(User, message.from_user.id)
            if user.balance < amount:
                await message.answer(
                    "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.\n"
                    f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance} ROXY\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_withdraw")
                    ]])
                )
                return
        
        await state.update_data(withdraw_amount=amount)
        await state.set_state(UserStates.entering_usdt_address)
        
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à USDT (TRC20) –∞–¥—Ä–µ—Å:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_withdraw")
            ]])
        )
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_withdraw")
            ]])
        )

@router.message(UserStates.entering_usdt_address)
async def process_withdraw_address(message: types.Message, state: FSMContext):
    data = await state.get_data()
    amount = data['withdraw_amount']
    usdt_amount = amount / 10  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è ROXY –≤ USDT (10:1)
    
    async with async_session() as session:
        user = await session.get(User, message.from_user.id)
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
        user.balance -= amount
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = Transaction(
            user_id=user.telegram_id,
            amount=amount,
            type="withdraw",
            status="pending",
            created_at=datetime.utcnow(),
            details={
                "usdt_address": message.text,
                "usdt_amount": usdt_amount
            }
        )
        
        session.add(transaction)
        await session.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        for admin_id in ADMIN_IDS:
            try:
                await message.bot.send_message(
                    admin_id,
                    f"üí∞ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥!\n\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n"
                    f"–°—É–º–º–∞: {amount} ROXY ({usdt_amount} USDT)\n"
                    f"–ê–¥—Ä–µ—Å: {message.text}\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∑–∞—è–≤–∫—É –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(
                            text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                            url=f"tg://user?id={user.telegram_id}"
                        )
                    ]])
                )
            except Exception as e:
                logger.error(f"Failed to notify admin {admin_id}: {e}")
        
        await message.answer(
            f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"–°—É–º–º–∞: {amount} ROXY ({usdt_amount} USDT)\n"
            f"–ê–¥—Ä–µ—Å: {message.text}\n\n"
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞.",
            reply_markup=get_main_keyboard(message.from_user.id)
        )
        await state.clear()

@router.callback_query(lambda c: c.data == "cancel_withdraw")
async def cancel_withdraw(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–º–µ–Ω–µ–Ω.",
        reply_markup=get_main_keyboard(callback.from_user.id)
    )

@router.callback_query(lambda c: c.data.startswith("open_dispute:"))
async def open_dispute(callback: types.CallbackQuery):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–ø–æ—Ä –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    try:
        transaction_id = int(callback.data.split(":")[1])
        
        async with async_session() as session:
            transaction = await session.get(Transaction, transaction_id)
            if not transaction:
                await callback.answer("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–¥–µ–ª–∫–∏
            if callback.from_user.id not in [transaction.buyer_id, transaction.seller_id]:
                await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ", show_alert=True)
                return
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–æ—Ä
            dispute = Dispute(
                transaction_id=transaction_id,
                initiator_id=callback.from_user.id,
                status="active",
                created_at=datetime.utcnow()
            )
            session.add(dispute)
            
            # –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
            transaction.status = "disputed"
            
            await session.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            await callback.message.edit_text(
                "‚öñÔ∏è –°–ø–æ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç!\n\n"
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç —Å–ø–æ—Ä –∏ –ø—Ä–∏–º–µ—Ç —Ä–µ—à–µ–Ω–∏–µ.\n"
                "–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã –¥–æ —Ä–µ—à–µ–Ω–∏—è —Å–ø–æ—Ä–∞."
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            other_party_id = transaction.seller_id if callback.from_user.id == transaction.buyer_id else transaction.buyer_id
            await callback.bot.send_message(
                other_party_id,
                "‚öñÔ∏è –ü–æ –≤–∞—à–µ–π —Å–¥–µ–ª–∫–µ –æ—Ç–∫—Ä—ã—Ç —Å–ø–æ—Ä!\n\n"
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç —Å–ø–æ—Ä –∏ –ø—Ä–∏–º–µ—Ç —Ä–µ—à–µ–Ω–∏–µ.\n"
                "–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã –¥–æ —Ä–µ—à–µ–Ω–∏—è —Å–ø–æ—Ä–∞."
            )
            
    except Exception as e:
        logger.error(f"Error in open_dispute: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–ø–æ—Ä–∞", show_alert=True)

@router.callback_query(lambda c: c.data.startswith("leave_review:"))
async def leave_review(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞"""
    try:
        transaction_id = int(callback.data.split(":")[1])
        
        async with async_session() as session:
            transaction = await session.get(Transaction, transaction_id)
            if not transaction:
                await callback.answer("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–¥–µ–ª–∫–∏
            if callback.from_user.id not in [transaction.buyer_id, transaction.seller_id]:
                await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ", show_alert=True)
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–æ–º—É –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤
            target_user_id = transaction.seller_id if callback.from_user.id == transaction.buyer_id else transaction.buyer_id
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ª–∞–π–∫–∞ –∏ –¥–∏–∑–ª–∞–π–∫–∞
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üëç –õ–∞–π–∫", callback_data=f"review:like:{transaction_id}:{target_user_id}"),
                    InlineKeyboardButton(text="üëé –î–∏–∑–ª–∞–π–∫", callback_data=f"review:dislike:{transaction_id}:{target_user_id}")
                ]
            ])
            
            await callback.message.edit_text(
                "‚≠êÔ∏è –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:",
                reply_markup=keyboard
            )
            
    except Exception as e:
        logger.error(f"Error in leave_review: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞", show_alert=True)

@router.callback_query(lambda c: c.data.startswith("review:"))
async def process_review(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∑—ã–≤ (–ª–∞–π–∫/–¥–∏–∑–ª–∞–π–∫)"""
    try:
        _, action, transaction_id, target_user_id = callback.data.split(":")
        transaction_id = int(transaction_id)
        target_user_id = int(target_user_id)
        
        async with async_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–¥–µ–ª–∫–∏
            transaction = await session.get(Transaction, transaction_id)
            if not transaction or callback.from_user.id not in [transaction.buyer_id, transaction.seller_id]:
                await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ", show_alert=True)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤
            target_user = await session.get(User, target_user_id)
            if not target_user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
            if action == "like":
                target_user.rating += 1
                await callback.answer("üëç –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫!")
            else:
                target_user.rating -= 1
                await callback.answer("üëé –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –¥–∏–∑–ª–∞–π–∫!")
            
            await session.commit()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!\n\n"
                f"–¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {target_user.rating:.1f}"
            )
            
    except Exception as e:
        logger.error(f"Error in process_review: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∑—ã–≤–∞", show_alert=True)

def register_common_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ–±—â–∏—Ö –∫–æ–º–∞–Ω–¥"""
    dp.include_router(router) 