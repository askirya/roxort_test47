from aiogram import Router, types, Dispatcher
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message
from aiogram.fsm.context import FSMContext
from database.db import async_session
from database.models import User, Transaction, Review
from sqlalchemy import select, or_
from config import ADMIN_IDS
from sqlalchemy.ext.asyncio import AsyncSession
import logging
from aiogram.filters import Command
from datetime import datetime

router = Router()
logger = logging.getLogger(__name__)

def get_main_keyboard(user_id: int = None):
    keyboard = [
        [
            KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")
        ],
        [
            KeyboardButton(text="üì± –ö—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä"),
            KeyboardButton(text="üì± –ü—Ä–æ–¥–∞—Ç—å –Ω–æ–º–µ—Ä")
        ],
        [
            KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å"),
            KeyboardButton(text="üí∏ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞")
        ],
        [
            KeyboardButton(text="‚ö†Ô∏è –°–ø–æ—Ä—ã"),
            KeyboardButton(text="‚≠êÔ∏è –û—Ç–∑—ã–≤—ã")
        ]
    ]
    
    if isinstance(user_id, int) and user_id in ADMIN_IDS:
        keyboard.append([KeyboardButton(text="üîë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")])
    
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True
    )

def get_start_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")]],
        resize_keyboard=True
    )

def get_admin_keyboard():
    keyboard = [
        [
            KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            KeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        ],
        [
            KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
            KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥")
        ]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

async def check_user_registered(user_id: int) -> bool:
    async with async_session() as session:
        query = select(User).where(User.telegram_id == user_id)
        result = await session.execute(query)
        user = result.scalar_one_or_none()
        return user is not None

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        async with async_session() as session:
            user = await session.get(User, message.from_user.id)
            
            if not user:
                user = User(
                    telegram_id=message.from_user.id,
                    username=message.from_user.username,
                    created_at=datetime.utcnow(),
                    balance=0.0,
                    rating=5.0,
                    is_blocked=False
                )
                session.add(user)
                await session.commit()
                
                await message.answer(
                    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ROXORT!\n\n"
                    "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
                    reply_markup=get_main_keyboard(message.from_user.id)
                )
            else:
                await message.answer(
                    "üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ ROXORT!\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:",
                    reply_markup=get_main_keyboard(message.from_user.id)
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "ü§ñ ROXORT - –ë–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤\n\n"
        "üì± –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/buy - –ö—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä\n"
        "/sell - –ü—Ä–æ–¥–∞—Ç—å –Ω–æ–º–µ—Ä\n"
        "/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/dispute - –û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä\n"
        "/ratings - –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤\n\n"
        "‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
        "1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start\n"
        "2. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é\n\n"
        "‚ö†Ô∏è –í–∞–∂–Ω–æ:\n"
        "- –í—Å–µ —Å–¥–µ–ª–∫–∏ –∑–∞—â–∏—â–µ–Ω—ã\n"
        "–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É —Å–ø–æ—Ä–æ–≤\n"
        "- –†–µ–π—Ç–∏–Ω–≥ –≤–ª–∏—è–µ—Ç –Ω–∞ –¥–æ–≤–µ—Ä–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å"
    )
    await message.answer(help_text)

@router.message(lambda message: message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    async with async_session() as session:
        user = await session.get(User, message.from_user.id)
        
        if not user:
            await message.answer(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:",
                reply_markup=get_start_keyboard()
            )
            return
        
        tx_query = select(Transaction).where(
            or_(
                Transaction.buyer_id == user.telegram_id,
                Transaction.seller_id == user.telegram_id
            )
        )
        tx_result = await session.execute(tx_query)
        transactions = tx_result.scalars().all()
        
        sold_count = len([tx for tx in transactions if tx.seller_id == user.telegram_id and tx.status == "completed"])
        bought_count = len([tx for tx in transactions if tx.buyer_id == user.telegram_id and tx.status == "completed"])
        
        reviews_query = select(Review).where(Review.reviewed_id == user.telegram_id)
        reviews_result = await session.execute(reviews_query)
        reviews_count = len(reviews_result.scalars().all())
        
        await message.answer(
            f"üìä –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
            f"ID: {user.telegram_id}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone_number}\n"
            f"–†–µ–π—Ç–∏–Ω–≥: {'‚≠êÔ∏è' * round(user.rating)} ({user.rating:.1f})\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: {reviews_count}\n"
            f"–ë–∞–ª–∞–Ω—Å: {user.balance} USDT\n"
            f"–ü—Ä–æ–¥–∞–Ω–æ –Ω–æ–º–µ—Ä–æ–≤: {sold_count}\n"
            f"–ö—É–ø–ª–µ–Ω–æ –Ω–æ–º–µ—Ä–æ–≤: {bought_count}\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y')}",
            reply_markup=get_main_keyboard(message.from_user.id)
        )

@router.message(lambda message: message.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def show_balance(message: Message):
    async with async_session() as session:
        user = await session.get(User, message.from_user.id)
        
        if not user:
            await message.answer(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:",
                reply_markup=get_start_keyboard()
            )
            return
        
        await message.answer(
            f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance} USDT",
            reply_markup=get_main_keyboard(message.from_user.id)
        )

@router.message(lambda message: message.text == "üì± –ö—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä")
async def start_buying(message: Message, state: FSMContext):
    if not await check_user_registered(message.from_user.id):
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=get_start_keyboard()
        )
        return
    
    from handlers.buying import show_services_message
    await show_services_message(message, state)

@router.message(lambda message: message.text == "üì± –ü—Ä–æ–¥–∞—Ç—å –Ω–æ–º–µ—Ä")
async def handle_sell(message: Message, state: FSMContext):
    if not await check_user_registered(message.from_user.id):
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=get_start_keyboard()
        )
        return
    
    from handlers.selling import start_selling
    await start_selling(message, state)

@router.message(lambda message: message.text == "üí∏ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞")
async def handle_withdraw(message: Message, state: FSMContext):
    if not await check_user_registered(message.from_user.id):
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=get_start_keyboard()
        )
        return
    
    async with async_session() as session:
        user = await session.get(User, message.from_user.id)
        if user.balance < 10:
            await message.answer(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.\n"
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 10 USDT",
                reply_markup=get_main_keyboard(message.from_user.id)
            )
            return
    
    await state.set_state("withdraw_amount")
    await message.answer(
        "üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–º–∏–Ω–∏–º—É–º 10 USDT):",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )

@router.message(lambda message: message.text == "‚ö†Ô∏è –°–ø–æ—Ä—ã")
async def handle_disputes(message: Message):
    if not await check_user_registered(message.from_user.id):
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=get_start_keyboard()
        )
        return
    
    from handlers.disputes import show_disputes
    await show_disputes(message)

@router.message(lambda message: message.text == "‚≠êÔ∏è –û—Ç–∑—ã–≤—ã")
async def handle_reviews(message: Message):
    if not await check_user_registered(message.from_user.id):
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=get_start_keyboard()
        )
        return
    
    from handlers.ratings import show_reviews
    await show_reviews(message)

@router.message(lambda message: message.text == "üîë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def handle_admin_panel(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_main_keyboard(message.from_user.id)
        )
        return
    
    from handlers.admin import show_admin_panel
    await show_admin_panel(message)

@router.message(lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def handle_cancel(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        await state.clear()
    
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_keyboard(message.from_user.id)
    )

@router.message(lambda message: message.text and message.text.startswith("üí∏"))
async def handle_withdraw_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace("üí∏", "").strip())
        if amount < 10:
            await message.answer(
                "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 10 USDT\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
                    resize_keyboard=True
                )
            )
            return
        
        async with async_session() as session:
            user = await session.get(User, message.from_user.id)
            if user.balance < amount:
                await message.answer(
                    "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É:",
                    reply_markup=ReplyKeyboardMarkup(
                        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
                        resize_keyboard=True
                    )
                )
                return
            
            user.balance -= amount
            await session.commit()
        
        await state.clear()
        await message.answer(
            f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount} USDT —Å–æ–∑–¥–∞–Ω–∞.\n"
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=get_main_keyboard(message.from_user.id)
        )
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
                resize_keyboard=True
            )
        )

def register_common_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ–±—â–∏—Ö –∫–æ–º–∞–Ω–¥"""
    dp.include_router(router) 