from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from database.db import async_session
from database.models import User, Transaction, Review, PhoneListing
from datetime import datetime, timedelta
from sqlalchemy import select, and_, or_
from handlers.common import get_main_keyboard, check_user_registered
import logging
from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.types import Message

router = Router()
logger = logging.getLogger(__name__)

class ReviewStates(StatesGroup):
    selecting_transaction = State()
    entering_rating = State()
    entering_comment = State()

def get_rating_keyboard():
    keyboard = []
    for rating in range(1, 6):
        keyboard.append([InlineKeyboardButton(
            text="‚≠ê" * rating,
            callback_data=f"rate:{rating}"
        )])
    keyboard.append([InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data="cancel_review"
    )])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@router.message(F.text == "‚≠êÔ∏è –û—Ç–∑—ã–≤—ã")
async def show_rating_menu(message: types.Message, state: FSMContext):
    if not await check_user_registered(message.from_user.id):
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:",
            reply_markup=get_main_keyboard()
        )
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="leave_review")],
            [InlineKeyboardButton(text="üë§ –ú–æ–∏ –æ—Ç–∑—ã–≤—ã", callback_data="my_reviews")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_review")]
        ]
    )
    
    await message.answer(
        "‚≠êÔ∏è –ú–µ–Ω—é –æ—Ç–∑—ã–≤–æ–≤:\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@router.callback_query(lambda c: c.data == "leave_review")
async def start_review(callback: types.CallbackQuery, state: FSMContext):
    week_ago = datetime.utcnow() - timedelta(days=7)
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        query = select(Transaction).where(
            and_(
                or_(
                    Transaction.buyer_id == callback.from_user.id,
                    Transaction.seller_id == callback.from_user.id
                ),
                Transaction.status == "completed",
                Transaction.completed_at >= week_ago
            )
        )
        result = await session.execute(query)
        transactions = result.scalars().all()
        
        if not transactions:
            await callback.message.edit_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                    callback_data="cancel_review"
                )]])
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
        keyboard = []
        for tx in transactions:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –æ—Ç–∑—ã–≤
            review_exists = await session.scalar(
                select(Review).where(Review.transaction_id == tx.id)
            )
            if not review_exists:
                listing = await session.get(PhoneListing, tx.listing_id)
                keyboard.append([InlineKeyboardButton(
                    text=f"üì± {listing.service} | üí∞ {tx.amount} USDT",
                    callback_data=f"review_tx:{tx.id}"
                )])
        
        if not keyboard:
            await callback.message.edit_text(
                "–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤—ã –ø–æ –≤—Å–µ–º –Ω–µ–¥–∞–≤–Ω–∏–º —Å–¥–µ–ª–∫–∞–º.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                    callback_data="cancel_review"
                )]])
            )
            return
        
        keyboard.append([InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="cancel_review"
        )])
        
        await state.set_state(ReviewStates.selecting_transaction)
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É –¥–ª—è –æ—Ç–∑—ã–≤–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

@router.callback_query(lambda c: c.data.startswith("review_tx:"))
async def process_transaction_selection(callback: types.CallbackQuery, state: FSMContext):
    tx_id = int(callback.data.split(":")[1])
    await state.update_data(transaction_id=tx_id)
    await state.set_state(ReviewStates.entering_rating)
    
    await callback.message.edit_text(
        "–û—Ü–µ–Ω–∏—Ç–µ —Å–¥–µ–ª–∫—É:",
        reply_markup=get_rating_keyboard()
    )

@router.callback_query(lambda c: c.data.startswith("rate:"))
async def process_rating(callback: types.CallbackQuery, state: FSMContext):
    rating = int(callback.data.split(":")[1])
    await state.update_data(rating=rating)
    await state.set_state(ReviewStates.entering_comment)
    
    await callback.message.edit_text(
        "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç–∑—ã–≤—É:\n"
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º/–ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="cancel_review"
        )]])
    )

@router.message(ReviewStates.entering_comment)
async def process_comment(message: types.Message, state: FSMContext):
    comment = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    if len(comment) < 5:
        await message.answer(
            "‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–∑—ã–≤ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤).",
            reply_markup=get_main_keyboard(message.from_user.id)
        )
        return
    
    if len(comment) > 500:
        await message.answer(
            "‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 500 —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=get_main_keyboard(message.from_user.id)
        )
        return
    
    data = await state.get_data()
    transaction_id = data['transaction_id']
    rating = data['rating']
    
    async with async_session() as session:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transaction = await session.get(Transaction, transaction_id)
            if not transaction:
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞: —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                    reply_markup=get_main_keyboard(message.from_user.id)
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –æ—Ç–∑—ã–≤
            existing_review = await session.scalar(
                select(Review).where(Review.transaction_id == transaction_id)
            )
            if existing_review:
                await message.answer(
                    "‚ùå –û—Ç–∑—ã–≤ –¥–ª—è —ç—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É–∂–µ –æ—Å—Ç–∞–≤–ª–µ–Ω.",
                    reply_markup=get_main_keyboard(message.from_user.id)
                )
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–∑—ã–≤ –∏ –∫–æ–º—É
            if message.from_user.id == transaction.buyer_id:
                reviewer_id = transaction.buyer_id
                reviewed_id = transaction.seller_id
            else:
                reviewer_id = transaction.seller_id
                reviewed_id = transaction.buyer_id
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–∑—ã–≤
            review = Review(
                transaction_id=transaction_id,
                reviewer_id=reviewer_id,
                reviewed_id=reviewed_id,
                rating=rating,
                comment=comment,
                created_at=datetime.utcnow()
            )
            session.add(review)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            reviewed_user = await session.get(User, reviewed_id)
            if not reviewed_user:
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=get_main_keyboard(message.from_user.id)
                )
                return
            
            reviews_query = select(Review).where(Review.reviewed_id == reviewed_id)
            reviews_result = await session.execute(reviews_query)
            reviews = reviews_result.scalars().all()
            
            total_rating = sum(r.rating for r in reviews) + rating
            reviewed_user.rating = total_rating / (len(reviews) + 1)
            
            await session.commit()
            
            await message.answer(
                "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!\n"
                f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ü–µ–Ω–∫—É: {'‚≠ê' * rating}",
                reply_markup=get_main_keyboard(message.from_user.id)
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–æ–≤–æ–º –æ—Ç–∑—ã–≤–µ
            try:
                await message.bot.send_message(
                    reviewed_id,
                    f"üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤!\n"
                    f"–û—Ü–µ–Ω–∫–∞: {'‚≠ê' * rating}\n"
                    f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
                )
            except Exception as e:
                logger.error(f"Failed to notify user {reviewed_id} about new review: {e}")
                
        except Exception as e:
            logger.error(f"Error in process_comment: {e}")
            await session.rollback()
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard(message.from_user.id)
            )
    
    await state.clear()

@router.callback_query(lambda c: c.data == "my_reviews")
async def show_my_reviews(callback: types.CallbackQuery):
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        reviews_query = select(Review).where(
            Review.reviewed_id == callback.from_user.id
        ).order_by(Review.created_at.desc())
        
        result = await session.execute(reviews_query)
        reviews = result.scalars().all()
        
        if not reviews:
            await callback.message.edit_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                    callback_data="cancel_review"
                )]])
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–∑—ã–≤ —Å –∫–Ω–æ–ø–∫–æ–π "–°–ª–µ–¥—É—é—â–∏–π"
        if len(reviews) > 1:
            keyboard = [[InlineKeyboardButton(
                text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π",
                callback_data="next_review:1"
            )]]
        else:
            keyboard = [[InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                callback_data="cancel_review"
            )]]
        
        review = reviews[0]
        reviewer = await session.get(User, review.reviewer_id)
        transaction = await session.get(Transaction, review.transaction_id)
        
        await callback.message.edit_text(
            f"‚≠êÔ∏è –û—Ç–∑—ã–≤ –æ—Ç {'–ø–æ–∫—É–ø–∞—Ç–µ–ª—è' if reviewer.telegram_id == transaction.buyer_id else '–ø—Ä–æ–¥–∞–≤—Ü–∞'}\n"
            f"–û—Ü–µ–Ω–∫–∞: {'‚≠ê' * review.rating}\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {review.comment}\n"
            f"–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏: {transaction.amount} USDT\n"
            f"–î–∞—Ç–∞: {review.created_at.strftime('%d.%m.%Y %H:%M')}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

@router.callback_query(lambda c: c.data.startswith("next_review:"))
async def show_next_review(callback: types.CallbackQuery):
    current_index = int(callback.data.split(":")[1])
    
    async with async_session() as session:
        reviews_query = select(Review).where(
            Review.reviewed_id == callback.from_user.id
        ).order_by(Review.created_at.desc())
        
        result = await session.execute(reviews_query)
        reviews = result.scalars().all()
        
        if current_index + 1 >= len(reviews):
            await callback.message.edit_text(
                "–≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–∑—ã–≤.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(
                    text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                    callback_data="cancel_review"
                )]])
            )
            return
        
        review = reviews[current_index + 1]
        reviewer = await session.get(User, review.reviewer_id)
        transaction = await session.get(Transaction, review.transaction_id)
        
        keyboard = []
        if current_index + 1 > 0:
            keyboard.append([InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π",
                callback_data=f"next_review:{current_index}"
            )])
        if current_index + 1 < len(reviews) - 1:
            keyboard.append([InlineKeyboardButton(
                text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π",
                callback_data=f"next_review:{current_index + 1}"
            )])
        keyboard.append([InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
            callback_data="cancel_review"
        )])
        
        await callback.message.edit_text(
            f"‚≠êÔ∏è –û—Ç–∑—ã–≤ –æ—Ç {'–ø–æ–∫—É–ø–∞—Ç–µ–ª—è' if reviewer.telegram_id == transaction.buyer_id else '–ø—Ä–æ–¥–∞–≤—Ü–∞'}\n"
            f"–û—Ü–µ–Ω–∫–∞: {'‚≠ê' * review.rating}\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {review.comment}\n"
            f"–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏: {transaction.amount} USDT\n"
            f"–î–∞—Ç–∞: {review.created_at.strftime('%d.%m.%Y %H:%M')}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

@router.callback_query(lambda c: c.data == "cancel_review")
async def cancel_review(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –û—Ç–∑—ã–≤ –æ—Ç–º–µ–Ω–µ–Ω.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(
            text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data="back_to_main"
        )]])
    )

def register_rating_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤"""
    dp.include_router(router) 