from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from database.db import get_session, async_session
from database.models import User, Transaction, Dispute
from datetime import datetime
from sqlalchemy import select, and_, or_
from config import ADMIN_IDS
from handlers.common import get_main_keyboard, check_user_registered
from log import logger
import logging
from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.types import Message

router = Router()

logger = logging.getLogger(__name__)

class DisputeStates(StatesGroup):
    entering_description = State()
    selecting_transaction = State()
    confirming = State()

def get_dispute_keyboard(transaction_id: int):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="üìù –û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä",
                callback_data=f"open_dispute:{transaction_id}"
            )],
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="cancel_dispute"
            )]
        ]
    )
    return keyboard

def get_admin_dispute_keyboard(dispute_id: int):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –í–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é", 
                                   callback_data=f"resolve_buyer_{dispute_id}"),
                InlineKeyboardButton(text="üí∞ –ü–µ—Ä–µ–¥–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–æ–¥–∞–≤—Ü—É", 
                                   callback_data=f"resolve_seller_{dispute_id}")
            ],
            [
                InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å —Å–ø–æ—Ä", 
                                   callback_data=f"close_dispute_{dispute_id}")
            ]
        ]
    )
    return keyboard

@router.message(lambda message: message.text == "‚ö†Ô∏è –°–ø–æ—Ä—ã")
async def show_disputes_menu(message: types.Message):
    async with async_session() as session:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            query = select(User).where(User.telegram_id == message.from_user.id)
            result = await session.execute(query)
            user = result.scalar_one_or_none()
            
            if not user:
                await message.answer(
                    "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–Ω–∞—á–∞–ª–∞.",
                    reply_markup=get_main_keyboard()
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            disputes_query = select(Dispute).where(
                and_(
                    Dispute.user_id == message.from_user.id,
                    Dispute.status == "open"
                )
            )
            disputes_result = await session.execute(disputes_query)
            disputes = disputes_result.scalars().all()

            if not disputes:
                await message.answer(
                    "‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Ä–æ–≤.\n\n"
                    "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π:\n"
                    "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è'\n"
                    "2. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é\n"
                    "3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä'\n"
                    "4. –û–ø–∏—à–∏—Ç–µ –≤–æ–∑–Ω–∏–∫—à—É—é –ø—Ä–æ–±–ª–µ–º—É\n\n"
                    "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.",
                    reply_markup=get_main_keyboard(message.from_user.id)
                )
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Ä–æ–≤
            disputes_text = "üö® –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Ä—ã:\n\n"
            for dispute in disputes:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                tx_query = select(Transaction).where(Transaction.id == dispute.transaction_id)
                tx_result = await session.execute(tx_query)
                transaction = tx_result.scalar_one_or_none()

                if transaction:
                    disputes_text += (
                        f"ID —Å–ø–æ—Ä–∞: #{dispute.id}\n"
                        f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: #{transaction.id}\n"
                        f"–°—Ç–∞—Ç—É—Å: ‚è≥ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: {dispute.description}\n"
                        f"–°–æ–∑–¥–∞–Ω: {dispute.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                        f"–°—É–º–º–∞: {transaction.amount} USDT\n\n"
                    )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_disputes")]
            ])

            await message.answer(
                disputes_text,
                reply_markup=keyboard
            )

        except Exception as e:
            logger.error(f"Error in disputes menu: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–æ—Ä–æ–≤.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard(message.from_user.id)
            )
        finally:
            await session.close()

@router.callback_query(lambda c: c.data == "refresh_disputes")
async def refresh_disputes(callback: types.CallbackQuery):
    async with async_session() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            disputes_query = select(Dispute).where(
                and_(
                    Dispute.user_id == callback.from_user.id,
                    Dispute.status == "open"
                )
            )
            disputes_result = await session.execute(disputes_query)
            disputes = disputes_result.scalars().all()

            if not disputes:
                await callback.message.edit_text(
                    "‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Ä–æ–≤.",
                    reply_markup=None
                )
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ø–æ—Ä–æ–≤
            disputes_text = "üö® –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Ä—ã:\n\n"
            for dispute in disputes:
                tx_query = select(Transaction).where(Transaction.id == dispute.transaction_id)
                tx_result = await session.execute(tx_query)
                transaction = tx_result.scalar_one_or_none()

                if transaction:
                    disputes_text += (
                        f"ID —Å–ø–æ—Ä–∞: #{dispute.id}\n"
                        f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: #{transaction.id}\n"
                        f"–°—Ç–∞—Ç—É—Å: ‚è≥ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: {dispute.description}\n"
                        f"–°–æ–∑–¥–∞–Ω: {dispute.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                        f"–°—É–º–º–∞: {transaction.amount} USDT\n\n"
                    )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_disputes")]
            ])

            await callback.message.edit_text(
                disputes_text,
                reply_markup=keyboard
            )

        except Exception as e:
            logger.error(f"Error refreshing disputes: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–ø–æ—Ä–æ–≤", show_alert=True)
        finally:
            await session.close()

@router.callback_query(lambda c: c.data.startswith("select_transaction:"))
async def process_transaction_selection(callback: types.CallbackQuery, state: FSMContext):
    transaction_id = int(callback.data.split(":")[1])
    await state.update_data(transaction_id=transaction_id)
    await state.set_state(DisputeStates.entering_description)
    
    await callback.message.edit_text(
        "–û–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Å–ø–æ—Ä–∞:\n"
        "–ë—É–¥—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ—Ç–∞–ª–∏."
    )

@router.message(DisputeStates.entering_description)
async def process_dispute_description(message: types.Message, state: FSMContext):
    description = message.text.strip()
    if len(description) < 10:
        await message.answer(
            "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã."
        )
        return
    
    data = await state.get_data()
    transaction_id = data['transaction_id']
    
    async with await get_session() as session:
        # –°–æ–∑–¥–∞–µ–º —Å–ø–æ—Ä
        dispute = Dispute(
            transaction_id=transaction_id,
            description=description,
            status="open",
            created_at=datetime.utcnow()
        )
        session.add(dispute)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transaction = await session.get(Transaction, transaction_id)
        transaction.status = "disputed"
        
        await session.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        for admin_id in ADMIN_IDS:
            try:
                await message.bot.send_message(
                    admin_id,
                    f"‚ö†Ô∏è –ù–æ–≤—ã–π —Å–ø–æ—Ä #{dispute.id}\n"
                    f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: #{transaction_id}\n"
                    f"–°—É–º–º–∞: {transaction.amount} USDT\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}"
                )
            except Exception as e:
                logger.error(f"Failed to notify admin {admin_id}: {e}")
        
        await message.answer(
            "‚úÖ –°–ø–æ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç!\n"
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=get_main_keyboard(message.from_user.id)
        )
    
    await state.clear()

@router.callback_query(lambda c: c.data == "cancel_dispute")
async def cancel_dispute(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–ø–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_keyboard(callback.from_user.id)
    )

@router.message(F.text == "üìã –ú–æ–∏ —Å–ø–æ—Ä—ã")
async def show_my_disputes(message: types.Message):
    async with await get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ø–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        query = select(Dispute).where(
            Dispute.initiator_id == message.from_user.id
        ).order_by(Dispute.created_at.desc())
        
        result = await session.execute(query)
        disputes = result.scalars().all()
        
        if not disputes:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–ø–æ—Ä–æ–≤.")
            return
        
        for dispute in disputes:
            transaction = await session.get(Transaction, dispute.transaction_id)
            listing = await session.get(PhoneListing, transaction.listing_id)
            
            status_emoji = {
                "open": "üî¥",
                "resolved": "‚úÖ",
                "closed": "‚ö´Ô∏è"
            }
            
            await message.answer(
                f"{status_emoji.get(dispute.status, '‚ùì')} –°–ø–æ—Ä #{dispute.id}\n\n"
                f"üì± –°–µ—Ä–≤–∏—Å: {listing.service}\n"
                f"üí∞ –°—É–º–º–∞: {transaction.amount} USDT\n"
                f"üìÖ –°–æ–∑–¥–∞–Ω: {dispute.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"üìù –°—Ç–∞—Ç—É—Å: {dispute.status}\n"
                f"‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {dispute.description}"
            )

@router.callback_query(lambda c: c.data.startswith('resolve_'))
async def resolve_dispute(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    action, dispute_id = callback.data.split('_')[1:]
    dispute_id = int(dispute_id)
    
    async with await get_session() as session:
        dispute = await session.get(Dispute, dispute_id)
        if not dispute or dispute.status != "open":
            await callback.answer("‚ùå –°–ø–æ—Ä —É–∂–µ –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
        
        transaction = await session.get(Transaction, dispute.transaction_id)
        buyer = await session.get(User, transaction.buyer_id)
        seller = await session.get(User, transaction.seller_id)
        
        if action == "buyer":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
            buyer.balance += transaction.amount
            transaction.status = "refunded"
            dispute.status = "resolved"
            
            await callback.message.edit_text(
                f"‚úÖ –°–ø–æ—Ä #{dispute_id} —Ä–∞–∑—Ä–µ—à–µ–Ω –≤ –ø–æ–ª—å–∑—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è\n"
                f"üí∞ –°—É–º–º–∞ {transaction.amount} USDT –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é."
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            await callback.bot.send_message(
                buyer.telegram_id,
                f"‚úÖ –í–∞—à —Å–ø–æ—Ä #{dispute_id} —Ä–∞–∑—Ä–µ—à–µ–Ω!\n"
                f"üí∞ –°—É–º–º–∞ {transaction.amount} USDT –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å."
            )
            
        elif action == "seller":
            # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–æ–¥–∞–≤—Ü—É
            seller.balance += transaction.amount
            transaction.status = "completed"
            dispute.status = "resolved"
            
            await callback.message.edit_text(
                f"‚úÖ –°–ø–æ—Ä #{dispute_id} —Ä–∞–∑—Ä–µ—à–µ–Ω –≤ –ø–æ–ª—å–∑—É –ø—Ä–æ–¥–∞–≤—Ü–∞\n"
                f"üí∞ –°—É–º–º–∞ {transaction.amount} USDT –ø–µ—Ä–µ–¥–∞–Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü—É."
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
            await callback.bot.send_message(
                seller.telegram_id,
                f"‚úÖ –°–ø–æ—Ä –ø–æ —Å–¥–µ–ª–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω –≤ –≤–∞—à—É –ø–æ–ª—å–∑—É!\n"
                f"üí∞ –°—É–º–º–∞ {transaction.amount} USDT –∑–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å."
            )
        
        await session.commit()

@router.callback_query(lambda c: c.data.startswith('close_dispute_'))
async def close_dispute(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    dispute_id = int(callback.data.split('_')[2])
    
    async with await get_session() as session:
        dispute = await session.get(Dispute, dispute_id)
        if not dispute or dispute.status != "open":
            await callback.answer("‚ùå –°–ø–æ—Ä —É–∂–µ –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
        
        dispute.status = "closed"
        await session.commit()
        
        await callback.message.edit_text(
            f"‚ö´Ô∏è –°–ø–æ—Ä #{dispute_id} –∑–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )

async def cmd_dispute(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /dispute"""
    try:
        async with async_session() as session:
            user = await session.get(User, message.from_user.id)
            if not user:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            disputes = await session.query(Dispute).filter(
                Dispute.user_id == user.id,
                Dispute.status == "open"
            ).all()
            
            if not disputes:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Ä–æ–≤.")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–æ—Ä–∞–º–∏
            response = "‚ö†Ô∏è –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Ä—ã:\n\n"
            for dispute in disputes:
                response += f"ID —Å–ø–æ—Ä–∞: {dispute.id}\n"
                response += f"–°—Ç–∞—Ç—É—Å: {dispute.status}\n"
                response += f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {dispute.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                response += f"–û–ø–∏—Å–∞–Ω–∏–µ: {dispute.description}\n\n"
            
            await message.answer(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /dispute: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def register_dispute_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å–ø–æ—Ä–æ–≤"""
    dp.message.register(cmd_dispute, Command("dispute"))
    dp.include_router(router) 