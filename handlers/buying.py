from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from database.db import async_session
from database.models import User, PhoneListing, Transaction
from datetime import datetime
from sqlalchemy import select, and_
from config import AVAILABLE_SERVICES
from handlers.common import get_main_keyboard, check_user_registered
from .services import available_services, get_services_keyboard
from log import logger
import logging
from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.types import Message

router = Router()

logger = logging.getLogger(__name__)

class BuyingStates(StatesGroup):
    choosing_service = State()
    viewing_listings = State()
    confirming_purchase = State()

def get_filter_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ —Å–µ—Ä–≤–∏—Å—É"), KeyboardButton(text="‚è∞ –ü–æ–∏—Å–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏")],
            [KeyboardButton(text="üí∞ –°–Ω–∞—á–∞–ª–∞ –¥–µ—à–µ–≤—ã–µ"), KeyboardButton(text="üí∞ –°–Ω–∞—á–∞–ª–∞ –¥–æ—Ä–æ–≥–∏–µ")],
            [KeyboardButton(text="üîÑ –°–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    return keyboard

def get_listing_keyboard(listing_id: int):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ö—É–ø–∏—Ç—å", callback_data=f"buy_{listing_id}"),
                InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π", callback_data="next_listing")
            ]
        ]
    )
    return keyboard

def get_services_keyboard():
    keyboard = []
    for service_id, service_name in AVAILABLE_SERVICES.items():
        keyboard.append([InlineKeyboardButton(
            text=f"üì± {service_name}",
            callback_data=f"buy_service:{service_id}"
        )])
    keyboard.append([InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data="buy_cancel"
    )])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def show_services_message(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await state.set_state(BuyingStates.choosing_service)
    await message.answer(
        "üì± –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–æ–º–µ—Ä–∞:",
        reply_markup=get_services_keyboard()
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ —á–µ—Ä–µ–∑ callback
async def show_services_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —á–µ—Ä–µ–∑ callback"""
    await state.set_state(BuyingStates.choosing_service)
    await callback.message.edit_text(
        "üì± –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–æ–º–µ—Ä–∞:",
        reply_markup=get_services_keyboard()
    )

@router.message(lambda message: message.text == "üì± –ö—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä")
async def start_buying(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏ –Ω–æ–º–µ—Ä–∞"""
    try:
        async with async_session() as session:
            user = await session.get(User, message.from_user.id)
            if not user:
                await message.answer(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.",
                    reply_markup=get_main_keyboard()
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            listings_query = select(PhoneListing).where(
                and_(
                    PhoneListing.is_active == True,
                    PhoneListing.seller_id != message.from_user.id
                )
            ).order_by(PhoneListing.created_at.desc())
            listings_result = await session.execute(listings_query)
            listings = listings_result.scalars().all()
            
            if not listings:
                await message.answer(
                    "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.",
                    reply_markup=get_main_keyboard()
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            keyboard = []
            for listing in listings:
                seller = await session.get(User, listing.seller_id)
                keyboard.append([InlineKeyboardButton(
                    text=f"{listing.service} | {listing.price:.2f} ROXY | –ü—Ä–æ–¥–∞–≤–µ—Ü: @{seller.username or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}",
                    callback_data=f"buy_listing:{listing.id}"
                )])
            
            keyboard.append([InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="cancel_buying"
            )])
            
            await state.set_state(BuyingStates.selecting_listing)
            await message.answer(
                "üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
    except Exception as e:
        logger.error(f"Error in start_buying: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–æ–≤.",
            reply_markup=get_main_keyboard()
        )

@router.callback_query(F.data == "buy_number")
async def handle_buy_callback(callback: types.CallbackQuery, state: FSMContext):
    await show_services_callback(callback, state)

@router.callback_query(lambda c: c.data == "buy_cancel")
async def cancel_buying(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.delete()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ callback.bot
        await callback.bot.send_message(
            chat_id=callback.from_user.id,
            text="‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_main_keyboard(callback.from_user.id)
        )
    except Exception as e:
        logger.error(f"Error in cancel_buying: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        try:
            await callback.message.edit_text(
                "‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=get_main_keyboard(callback.from_user.id)
            )
        except Exception as e:
            logger.error(f"Error editing message in cancel_buying: {e}")
            # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.bot.send_message(
                chat_id=callback.from_user.id,
                text="‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=get_main_keyboard(callback.from_user.id)
            )

@router.callback_query(lambda c: c.data.startswith("buy_service:"))
async def show_listings(callback: types.CallbackQuery, state: FSMContext):
    service = callback.data.split(":")[1]
    
    async with async_session() as session:
        try:
            query = select(PhoneListing).where(
                and_(
                    PhoneListing.service == service,
                    PhoneListing.is_active == True
                )
            ).order_by(PhoneListing.created_at.desc())
            
            result = await session.execute(query)
            listings = result.scalars().all()
            
            if not listings:
                await callback.message.edit_text(
                    f"üòï –°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è {available_services[service]}.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–∏—Å.",
                    reply_markup=get_services_keyboard()
                )
                return
            
            keyboard = []
            for listing in listings:
                seller_query = select(User).where(User.telegram_id == listing.seller_id)
                seller_result = await session.execute(seller_query)
                seller = seller_result.scalar_one_or_none()
                
                if seller:
                    keyboard.append([InlineKeyboardButton(
                        text=f"üí∞ {listing.price} USDT | ‚è∞ {listing.rental_period}—á | ‚≠êÔ∏è {seller.rating:.1f}",
                        callback_data=f"buy_listing:{listing.id}"
                    )])
            
            keyboard.append([InlineKeyboardButton(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                callback_data=f"buy_service:{service}"
            )])
            keyboard.append([InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="buy_cancel"
            )])
            
            await callback.message.edit_text(
                f"üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è {available_services[service]}:\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
        except Exception as e:
            logger.error(f"Error showing listings: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π", show_alert=True)
        finally:
            await session.close()

@router.callback_query(lambda c: c.data.startswith("buy_listing:"))
async def process_buy(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫—É –Ω–æ–º–µ—Ä–∞"""
    try:
        listing_id = int(callback.data.split(":")[1])
        
        async with async_session() as session:
            listing = await session.get(PhoneListing, listing_id)
            if not listing or listing.is_active == False:
                await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –ø—Ä–æ–¥–∞–Ω–æ", show_alert=True)
                return
            
            buyer = await session.get(User, callback.from_user.id)
            seller = await session.get(User, listing.seller_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            if buyer.balance < listing.price:
                await callback.answer(
                    f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ\n"
                    f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {listing.price:.2f} ROXY\n"
                    f"–í–∞—à –±–∞–ª–∞–Ω—Å: {buyer.balance:.2f} ROXY",
                    show_alert=True
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            transaction = Transaction(
                listing_id=listing.id,
                buyer_id=buyer.telegram_id,
                seller_id=seller.telegram_id,
                amount=listing.price,
                status="completed"
            )
            session.add(transaction)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
            buyer.balance -= listing.price
            seller.balance += listing.price
            
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            listing.is_active = False
            
            await session.commit()
            
            # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç
            chat_link = f"https://t.me/c/{callback.message.chat.id}/{transaction.id:010d}"
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            buyer_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º", url=chat_link)],
                [InlineKeyboardButton(text="‚öñÔ∏è –û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä", callback_data=f"open_dispute:{transaction.id}")],
                [InlineKeyboardButton(text="‚≠êÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"leave_review:{seller.telegram_id}")]
            ])
            
            await callback.message.edit_text(
                f"‚úÖ –ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω!\n\n"
                f"–°–µ—Ä–≤–∏—Å: {listing.service}\n"
                f"–¶–µ–Ω–∞: {listing.price:.2f} ROXY\n"
                f"–ü—Ä–æ–¥–∞–≤–µ—Ü: @{seller.username or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n\n"
                f"üí¨ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞.",
                reply_markup=buyer_keyboard
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
            seller_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º", url=chat_link)],
                [InlineKeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data=f"send_number:{transaction.id}")]
            ])
            
            await callback.bot.send_message(
                seller.telegram_id,
                f"üí∞ –í–∞—à –Ω–æ–º–µ—Ä –±—ã–ª –∫—É–ø–ª–µ–Ω!\n\n"
                f"–°–µ—Ä–≤–∏—Å: {listing.service}\n"
                f"–¶–µ–Ω–∞: {listing.price:.2f} ROXY\n"
                f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{buyer.username or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n\n"
                f"üí¨ –û—Ç–∫—Ä–æ–π—Ç–µ —á–∞—Ç —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞.",
                reply_markup=seller_keyboard
            )
            
    except Exception as e:
        logger.error(f"Error in process_buy: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –Ω–æ–º–µ—Ä–∞", show_alert=True)

@router.callback_query(lambda c: c.data.startswith("get_number:"))
async def get_number(callback: types.CallbackQuery):
    transaction_id = int(callback.data.split(":")[1])
    
    async with async_session() as session:
        try:
            transaction = await session.get(Transaction, transaction_id)
            if not transaction or transaction.buyer_id != callback.from_user.id:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
                return
            
            listing = await session.get(PhoneListing, transaction.listing_id)
            seller = await session.get(User, transaction.seller_id)
            
            if not listing or not seller:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
                return
            
            # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç
            chat_link = f"https://t.me/c/{str(transaction_id).zfill(10)}"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —á–∞—Ç
            chat_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üí¨ –ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç", url=chat_link),
                    InlineKeyboardButton(text="‚ö†Ô∏è –û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä", callback_data=f"open_dispute:{transaction_id}")
                ],
                [
                    InlineKeyboardButton(text="‚≠êÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"leave_review:{transaction_id}")
                ]
            ])
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞ –æ –∑–∞–ø—Ä–æ—Å–µ –Ω–æ–º–µ—Ä–∞
            try:
                await callback.bot.send_message(
                    seller.telegram_id,
                    f"üì± –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–æ–º–µ—Ä –¥–ª—è {available_services[listing.service]}.\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —á–∞—Ç–µ:\n{chat_link}",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="üí¨ –ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç", url=chat_link)
                    ]])
                )
            except Exception as e:
                logger.error(f"Failed to notify seller {seller.telegram_id}: {e}")
            
            await callback.message.edit_text(
                f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ–¥–∞–≤—Ü—É!\n\n"
                f"–°–µ—Ä–≤–∏—Å: {available_services[listing.service]}\n"
                f"–ü—Ä–æ–¥–∞–≤–µ—Ü: @{seller.username or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —á–∞—Ç–µ:",
                reply_markup=chat_keyboard
            )
            
        except Exception as e:
            logger.error(f"Error in get_number: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(lambda c: c.data.startswith("send_number:"))
async def send_number(callback: types.CallbackQuery):
    transaction_id = int(callback.data.split(":")[1])
    
    async with async_session() as session:
        try:
            transaction = await session.get(Transaction, transaction_id)
            if not transaction or transaction.seller_id != callback.from_user.id:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
                return
            
            listing = await session.get(PhoneListing, transaction.listing_id)
            buyer = await session.get(User, transaction.buyer_id)
            
            if not listing or not buyer:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
            try:
                await callback.bot.send_message(
                    buyer.telegram_id,
                    f"üì± –í–æ—Ç –≤–∞—à –Ω–æ–º–µ—Ä –¥–ª—è {available_services[listing.service]}:\n"
                    f"{listing.phone_number}\n\n"
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ"
                )
            except Exception as e:
                logger.error(f"Failed to send number to buyer {buyer.telegram_id}: {e}")
            
            await callback.message.edit_text(
                "‚úÖ –ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—é!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="buy_cancel")
                ]])
            )
            
        except Exception as e:
            logger.error(f"Error in send_number: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.message(F.text == "üîç –ü–æ–∏—Å–∫ –ø–æ —Å–µ—Ä–≤–∏—Å—É")
async def search_by_service(message: types.Message, state: FSMContext):
    from handlers.selling import get_services_keyboard
    await state.set_state(BuyingStates.choosing_service)
    await message.answer(
        "üì± –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:",
        reply_markup=get_services_keyboard()
    )

@router.message(BuyingStates.choosing_service)
async def process_service_choice(message: types.Message, state: FSMContext):
    from handlers.selling import available_services
    
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        from handlers.common import get_main_keyboard
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_keyboard())
        return

    if message.text not in available_services:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    async with async_session() as session:
        query = select(PhoneListing).where(
            and_(
                PhoneListing.service == message.text,
                PhoneListing.is_active == True
            )
        ).order_by(PhoneListing.created_at.desc())
        
        result = await session.execute(query)
        listings = result.scalars().all()

        if not listings:
            await message.answer(
                "üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–∏—Å."
            )
            return

        await state.update_data(current_listing_index=0, listings=[listing.id for listing in listings])
        await show_listing(message, state, listings[0])

async def show_listing(message: types.Message, state: FSMContext, listing: PhoneListing):
    async with async_session() as session:
        seller = await session.get(User, listing.seller_id)
        
        await message.answer(
            f"üì± –ù–æ–º–µ—Ä –¥–ª—è {listing.service}\n\n"
            f"‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {listing.duration} —á–∞—Å(–æ–≤)\n"
            f"üí∞ –¶–µ–Ω–∞: {listing.price} USDT\n"
            f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller.username or '–ê–Ω–æ–Ω–∏–º'}\n"
            f"‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞: {seller.rating}\n"
            f"üìÖ –†–∞–∑–º–µ—â–µ–Ω–æ: {listing.created_at.strftime('%d.%m.%Y %H:%M')}",
            reply_markup=get_listing_keyboard(listing.id)
        )

@router.callback_query(lambda c: c.data == 'next_listing')
async def show_next_listing(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_index = data.get('current_listing_index', 0)
    listings = data.get('listings', [])
    
    if current_index + 1 >= len(listings):
        await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ.")
        return
    
    current_index += 1
    await state.update_data(current_listing_index=current_index)
    
    async with async_session() as session:
        listing = await session.get(PhoneListing, listings[current_index])
        if listing:
            await show_listing(callback.message, state, listing)

@router.message(F.text == "üí∞ –°–Ω–∞—á–∞–ª–∞ –¥–µ—à–µ–≤—ã–µ")
async def sort_by_price_asc(message: types.Message, state: FSMContext):
    async with async_session() as session:
        query = select(PhoneListing).where(
            PhoneListing.is_active == True
        ).order_by(PhoneListing.price.asc())
        
        await process_sorted_listings(message, state, session, query)

@router.message(F.text == "üí∞ –°–Ω–∞—á–∞–ª–∞ –¥–æ—Ä–æ–≥–∏–µ")
async def sort_by_price_desc(message: types.Message, state: FSMContext):
    async with async_session() as session:
        query = select(PhoneListing).where(
            PhoneListing.is_active == True
        ).order_by(PhoneListing.price.desc())
        
        await process_sorted_listings(message, state, session, query)

@router.message(F.text == "üîÑ –°–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ")
async def sort_by_date(message: types.Message, state: FSMContext):
    async with async_session() as session:
        query = select(PhoneListing).where(
            PhoneListing.is_active == True
        ).order_by(PhoneListing.created_at.desc())
        
        await process_sorted_listings(message, state, session, query)

async def process_sorted_listings(message: types.Message, state: FSMContext, session, query):
    result = await session.execute(query)
    listings = result.scalars().all()
    
    if not listings:
        await message.answer("üòï –°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.")
        return
    
    await state.update_data(current_listing_index=0, listings=[listing.id for listing in listings])
    await show_listing(message, state, listings[0])

@router.callback_query(F.data.startswith("buy_listing_"))
async def confirm_purchase(callback: types.CallbackQuery, state: FSMContext):
    listing_id = int(callback.data.split("_")[2])
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        query = select(PhoneListing).where(PhoneListing.id == listing_id)
        result = await session.execute(query)
        listing = result.scalar_one_or_none()
        
        if not listing or not listing.is_active:
            await callback.answer("‚ùå –≠—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        buyer_query = select(User).where(User.telegram_id == callback.from_user.id)
        result = await session.execute(buyer_query)
        buyer = result.scalar_one_or_none()
        
        if not buyer:
            await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", show_alert=True)
            return
            
        if buyer.balance < listing.price:
            await callback.answer(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.\n"
                f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {listing.price}‚ÇΩ\n"
                f"–ù–∞ –±–∞–ª–∞–Ω—Å–µ: {buyer.balance}‚ÇΩ",
                show_alert=True
            )
            return
        
        keyboard = [
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                    callback_data=f"confirm_buy_{listing_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                    callback_data="cancel_buy"
                )
            ]
        ]
        
        await state.update_data(listing_id=listing_id)
        await state.set_state(BuyingStates.confirming_purchase)
        
        await callback.message.edit_text(
            f"üì± –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏:\n\n"
            f"–°–µ—Ä–≤–∏—Å: {available_services[listing.service]}\n"
            f"–ù–æ–º–µ—Ä: {listing.phone_number}\n"
            f"–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã: {listing.rental_period} —á–∞—Å–æ–≤\n"
            f"–¶–µ–Ω–∞: {listing.price}‚ÇΩ\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

@router.callback_query(F.data.startswith("confirm_buy_"))
async def process_purchase(callback: types.CallbackQuery, state: FSMContext):
    listing_id = int(callback.data.split("_")[2])
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
        query = select(PhoneListing).where(PhoneListing.id == listing_id)
        result = await session.execute(query)
        listing = result.scalar_one_or_none()
        
        if not listing or not listing.is_active:
            await callback.answer("‚ùå –≠—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–¥–∞–≤—Ü–∞
        buyer_query = select(User).where(User.telegram_id == callback.from_user.id)
        seller_query = select(User).where(User.telegram_id == listing.seller_id)
        
        result = await session.execute(buyer_query)
        buyer = result.scalar_one_or_none()
        
        result = await session.execute(seller_query)
        seller = result.scalar_one_or_none()
        
        if not buyer or not seller:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
            
        if buyer.balance < listing.price:
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ", show_alert=True)
            return
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            transaction = Transaction(
                buyer_id=buyer.telegram_id,
                seller_id=seller.telegram_id,
                listing_id=listing.id,
                amount=listing.price,
                status="completed",
                created_at=datetime.utcnow(),
                completed_at=datetime.utcnow()
            )
            session.add(transaction)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
            buyer.balance -= listing.price
            seller.balance += listing.price
            
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            listing.is_active = False
            
            await session.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await callback.bot.send_message(
                seller.telegram_id,
                f"üí∞ –í–∞—à –Ω–æ–º–µ—Ä {listing.phone_number} –±—ã–ª –∫—É–ø–ª–µ–Ω!\n"
                f"–°—É–º–º–∞: {listing.price}‚ÇΩ"
            )
            
            await callback.message.edit_text(
                "‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {listing.phone_number}\n"
                f"–°–µ—Ä–≤–∏—Å: {available_services[listing.service]}\n"
                f"–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã: {listing.rental_period} —á–∞—Å–æ–≤\n"
                f"–°—É–º–º–∞: {listing.price}‚ÇΩ\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ"
            )
            
            await state.clear()
            
        except Exception as e:
            logger.error(f"Error processing purchase: {e}")
            await session.rollback()
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏", show_alert=True)

@router.callback_query(F.data == "cancel_buy")
async def cancel_purchase(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
    )

@router.callback_query(F.data == "back_to_services")
async def back_to_services(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(BuyingStates.choosing_service)
    await callback.message.edit_text(
        "üì± –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–æ–º–µ—Ä–∞:",
        reply_markup=get_services_keyboard()
    )

async def cmd_buy(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /buy"""
    try:
        async with async_session() as session:
            user = await session.get(User, message.from_user.id)
            if not user:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
                return
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–∫—É–ø–∫–∏ –Ω–æ–º–µ—Ä–∞
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–æ–º–µ—Ä–∞:")
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /buy: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def register_buying_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"""
    dp.include_router(router)
    dp.message.register(cmd_buy, Command("buy")) 