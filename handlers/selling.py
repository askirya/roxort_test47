from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from database.db import async_session
from database.models import User, PhoneListing
from sqlalchemy import select
from handlers.common import get_main_keyboard
from .services import available_services, get_services_keyboard
from log import logger
import logging
from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.types import Message

router = Router()
logger = logging.getLogger(__name__)

class SellingStates(StatesGroup):
    choosing_service = State()
    entering_phone = State()
    entering_period = State()
    entering_price = State()
    confirming = State()

@router.message(F.text == "üì± –ü—Ä–æ–¥–∞—Ç—å –Ω–æ–º–µ—Ä")
async def start_selling(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–¥–∞–∂–∏ –Ω–æ–º–µ—Ä–∞"""
    async with async_session() as session:
        try:
            query = select(User).where(User.telegram_id == message.from_user.id)
            result = await session.execute(query)
            user = result.scalar_one_or_none()
            
            if not user:
                await message.answer(
                    "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–Ω–∞—á–∞–ª–∞.",
                    reply_markup=get_main_keyboard()
                )
                return
            
            await state.set_state(SellingStates.choosing_service)
            await message.answer(
                "üì± –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –Ω–æ–º–µ—Ä–∞:",
                reply_markup=get_services_keyboard()
            )
        except Exception as e:
            logger.error(f"Error in start_selling: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–¥–∞–∂–∏.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard()
            )

@router.callback_query(lambda c: c.data == "cancel_sell")
async def cancel_selling(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await callback.message.delete()
        await callback.message.answer(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_keyboard(callback.from_user.id)
        )
    except Exception as e:
        logger.error(f"Error in cancel_selling: {e}")
        await callback.message.edit_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_keyboard(callback.from_user.id)
        )

@router.callback_query(lambda c: c.data.startswith("service_"))
async def process_service_choice(callback: types.CallbackQuery, state: FSMContext):
    service = callback.data.split("_")[1]
    if service not in available_services:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ—Ä–≤–∏—Å", show_alert=True)
        return
    
    await state.update_data(service=service)
    await state.set_state(SellingStates.entering_phone)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_sell")
    ]])
    
    await callback.message.edit_text(
        f"üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è {available_services[service]}:\n"
        "–§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX",
        reply_markup=keyboard
    )

@router.message(SellingStates.entering_phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞
    if not (phone.startswith("+7") and len(phone) == 12 and phone[1:].isdigit()):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_sell")
        ]])
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞.\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7XXXXXXXXXX",
            reply_markup=keyboard
        )
        return
    
    await state.update_data(phone=phone)
    await state.set_state(SellingStates.entering_period)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_sell")
    ]])
    
    await message.answer(
        "‚è∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã –≤ —á–∞—Å–∞—Ö (–æ—Ç 1 –¥–æ 168):",
        reply_markup=keyboard
    )

@router.message(SellingStates.entering_period)
async def process_period(message: types.Message, state: FSMContext):
    try:
        period = int(message.text.strip())
        if not 1 <= period <= 168:
            raise ValueError
    except ValueError:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_sell")
        ]])
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 168",
            reply_markup=keyboard
        )
        return
    
    await state.update_data(period=period)
    await state.set_state(SellingStates.entering_price)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_sell")
    ]])
    
    await message.answer(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (–º–∏–Ω–∏–º—É–º 10‚ÇΩ):",
        reply_markup=keyboard
    )

@router.message(SellingStates.entering_price)
async def process_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text.strip())
        if price < 10:
            raise ValueError
    except ValueError:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_sell")
        ]])
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –Ω–µ –º–µ–Ω—å—à–µ 10",
            reply_markup=keyboard
        )
        return
    
    data = await state.get_data()
    await state.update_data(price=price)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_sell")
        ],
        [
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_sell")
        ]
    ])
    
    await message.answer(
        "üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n\n"
        f"–°–µ—Ä–≤–∏—Å: {available_services[data['service']]}\n"
        f"–ù–æ–º–µ—Ä: {data['phone']}\n"
        f"–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã: {data['period']} —á–∞—Å–æ–≤\n"
        f"–¶–µ–Ω–∞: {price}‚ÇΩ\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=keyboard
    )

@router.callback_query(lambda c: c.data == "confirm_sell")
async def confirm_listing(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    async with async_session() as session:
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            listing = PhoneListing(
                seller_id=callback.from_user.id,
                service=data['service'],
                phone_number=data['phone'],
                rental_period=data['period'],
                price=data['price'],
                is_active=True
            )
            session.add(listing)
            await session.commit()
            
            await callback.message.edit_text(
                "‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
                f"–°–µ—Ä–≤–∏—Å: {available_services[data['service']]}\n"
                f"–ù–æ–º–µ—Ä: {data['phone']}\n"
                f"–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã: {data['period']} —á–∞—Å–æ–≤\n"
                f"–¶–µ–Ω–∞: {data['price']}‚ÇΩ\n\n"
                "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è! üéâ"
            )
            
            await callback.message.answer(
                "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=get_main_keyboard(callback.from_user.id)
            )
            
            await state.clear()
            
        except Exception as e:
            await session.rollback()
            logger.error(f"Error creating listing: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", show_alert=True)

async def cmd_sell(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sell"""
    await start_selling(message, state)

def register_selling_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"""
    dp.include_router(router)
    dp.message.register(cmd_sell, Command("sell")) 