from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from database.db import async_session
from database.models import User, PhoneListing
from sqlalchemy import select
from handlers.common import get_main_keyboard
from .services import available_services, get_services_keyboard
from log import logger
import logging
from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.types import Message

router = Router()
logger = logging.getLogger(__name__)

class SellingStates(StatesGroup):
    choosing_service = State()
    entering_phone = State()
    entering_period = State()
    entering_price = State()
    confirming = State()
    selecting_service = State()

@router.message(F.text == "üì± –ü—Ä–æ–¥–∞—Ç—å –Ω–æ–º–µ—Ä")
async def start_selling(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–¥–∞–∂–∏ –Ω–æ–º–µ—Ä–∞"""
    try:
        async with async_session() as session:
            user = await session.get(User, message.from_user.id)
            if not user:
                await message.answer(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.",
                    reply_markup=get_main_keyboard()
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
            if user.balance < 0.1:
                await message.answer(
                    "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è.\n"
                    f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: 0.1 ROXY\n"
                    f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance:.2f} ROXY",
                    reply_markup=get_main_keyboard()
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            keyboard = []
            for service in SERVICES:
                keyboard.append([InlineKeyboardButton(
                    text=service,
                    callback_data=f"select_service:{service}"
                )])
            
            keyboard.append([InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="cancel_selling"
            )])
            
            await state.set_state(SellingStates.selecting_service)
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –Ω–æ–º–µ—Ä–∞:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
    except Exception as e:
        logger.error(f"Error in start_selling: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–¥–∞–∂–∏.",
            reply_markup=get_main_keyboard()
        )

@router.callback_query(lambda c: c.data.startswith("select_service:"))
async def process_service_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–µ—Ä–≤–∏—Å–∞"""
    service = callback.data.split(":")[1]
    await state.update_data(service=service)
    
    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ—Ä–≤–∏—Å: {service}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ ROXY (–º–∏–Ω–∏–º—É–º 0.1 ROXY):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="cancel_selling"
        )]])
    )

@router.message(SellingStates.entering_phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞
    if not (phone.startswith("+7") and len(phone) == 12 and phone[1:].isdigit()):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_sell")
        ]])
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞.\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7XXXXXXXXXX",
            reply_markup=keyboard
        )
        return
    
    await state.update_data(phone=phone)
    await state.set_state(SellingStates.entering_period)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_sell")
    ]])
    
    await message.answer(
        "‚è∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã –≤ —á–∞—Å–∞—Ö (–æ—Ç 1 –¥–æ 168):",
        reply_markup=keyboard
    )

@router.message(SellingStates.entering_period)
async def process_period(message: types.Message, state: FSMContext):
    try:
        period = int(message.text.strip())
        if not 1 <= period <= 168:
            raise ValueError
    except ValueError:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_sell")
        ]])
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 168",
            reply_markup=keyboard
        )
        return
    
    await state.update_data(period=period)
    await state.set_state(SellingStates.entering_price)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_sell")
    ]])
    
    await message.answer(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (–º–∏–Ω–∏–º—É–º 0.1 ROXY):",
        reply_markup=keyboard
    )

@router.message(SellingStates.entering_price)
async def process_price(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ü–µ–Ω—ã"""
    try:
        price = float(message.text)
        if price < 0.1:
            await message.answer(
                "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: 0.1 ROXY",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data="cancel_selling"
                )]])
            )
            return
        
        data = await state.get_data()
        service = data['service']
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        async with async_session() as session:
            user = await session.get(User, message.from_user.id)
            if user.balance < 0.1:
                await message.answer(
                    "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è.\n"
                    f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: 0.1 ROXY\n"
                    f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance:.2f} ROXY",
                    reply_markup=get_main_keyboard()
                )
                return
            
            # –°–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
            user.balance -= 0.1
            await session.commit()
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            listing = PhoneListing(
                seller_id=message.from_user.id,
                service=service,
                phone_number=data['phone'],
                rental_period=data['period'],
                price=price,
                is_active=True
            )
            session.add(listing)
            await session.commit()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            keyboard = [
                [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_listing:{listing.id}")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_selling")]
            ]
            
            await message.answer(
                f"üì± –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n\n"
                f"–°–µ—Ä–≤–∏—Å: {service}\n"
                f"–ù–æ–º–µ—Ä: {data['phone']}\n"
                f"–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã: {data['period']} —á–∞—Å–æ–≤\n"
                f"–¶–µ–Ω–∞: {price:.2f} ROXY\n"
                f"–ö–æ–º–∏—Å—Å–∏—è: 0.1 ROXY\n\n"
                f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
            
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="cancel_selling"
            )]])
        )
    except Exception as e:
        logger.error(f"Error in process_price: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ü–µ–Ω—ã.",
            reply_markup=get_main_keyboard()
        )

@router.callback_query(lambda c: c.data == "confirm_sell")
async def confirm_listing(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    async with async_session() as session:
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            listing = PhoneListing(
                seller_id=callback.from_user.id,
                service=data['service'],
                phone_number=data['phone'],
                rental_period=data['period'],
                price=data['price'],
                is_active=True
            )
            session.add(listing)
            await session.commit()
            
            await callback.message.edit_text(
                "‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
                f"–°–µ—Ä–≤–∏—Å: {available_services[data['service']]}\n"
                f"–ù–æ–º–µ—Ä: {data['phone']}\n"
                f"–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã: {data['period']} —á–∞—Å–æ–≤\n"
                f"–¶–µ–Ω–∞: {data['price']}‚ÇΩ\n\n"
                "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è! üéâ"
            )
            
            await callback.message.answer(
                "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=get_main_keyboard(callback.from_user.id)
            )
            
            await state.clear()
            
        except Exception as e:
            await session.rollback()
            logger.error(f"Error creating listing: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", show_alert=True)

async def cmd_sell(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sell"""
    await start_selling(message, state)

def register_selling_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"""
    dp.include_router(router)
    dp.message.register(cmd_sell, Command("sell")) 