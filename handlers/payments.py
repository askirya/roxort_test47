from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database.db import get_session, async_session
from database.models import User, Transaction
from config import MIN_DEPOSIT, MIN_WITHDRAWAL, CRYPTO_MIN_AMOUNT, CRYPTO_CURRENCY, ADMIN_IDS
from handlers.common import get_main_keyboard, check_user_registered
import logging
from sqlalchemy import select
from datetime import datetime
import uuid
from utils.crypto import crypto_bot
from log import logger

router = Router()
logger = logging.getLogger(__name__)

class PaymentStates(StatesGroup):
    entering_deposit_amount = State()
    entering_withdrawal_amount = State()
    entering_wallet = State()
    waiting_deposit_amount = State()
    waiting_withdrawal_amount = State()

class WithdrawStates(StatesGroup):
    entering_amount = State()
    confirming = State()

def get_payment_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="deposit")],
            [InlineKeyboardButton(text="üí∏ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞", callback_data="withdraw")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_payment")]
        ]
    )
    return keyboard

@router.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def show_balance_menu(message: types.Message):
    if not await check_user_registered(message.from_user.id):
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:",
            reply_markup=get_main_keyboard()
        )
        return

    async with await get_session() as session:
        user = await session.get(User, message.from_user.id)
        
        await message.answer(
            f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance:.2f} USDT\n\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {MIN_DEPOSIT} USDT\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {MIN_WITHDRAWAL} USDT",
            reply_markup=get_payment_keyboard()
        )

@router.callback_query(lambda c: c.data == "deposit")
async def start_deposit(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(PaymentStates.entering_deposit_amount)
    await callback.message.edit_text(
        f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–º–∏–Ω. {MIN_DEPOSIT} USDT):"
    )

@router.message(PaymentStates.entering_deposit_amount)
async def process_deposit_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.strip())
        if amount < MIN_DEPOSIT:
            await message.answer(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {MIN_DEPOSIT} USDT")
            return
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CryptoBot
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
        async with await get_session() as session:
            user = await session.get(User, message.from_user.id)
            user.balance += amount
            await session.commit()
            
            await message.answer(
                f"‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} USDT\n"
                f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance:.2f} USDT",
                reply_markup=get_main_keyboard(message.from_user.id)
            )
        
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")

@router.callback_query(lambda c: c.data == "withdraw")
async def start_withdrawal(callback: types.CallbackQuery, state: FSMContext):
    async with await get_session() as session:
        user = await session.get(User, callback.from_user.id)
        
        if user.balance < MIN_WITHDRAWAL:
            await callback.message.edit_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.\n"
                f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {MIN_WITHDRAWAL} USDT\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance:.2f} USDT",
                reply_markup=get_main_keyboard(callback.from_user.id)
            )
            return
        
        await state.set_state(PaymentStates.entering_withdrawal_amount)
        await callback.message.edit_text(
            f"üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞ (–º–∏–Ω. {MIN_WITHDRAWAL} USDT):\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ: {user.balance:.2f} USDT"
        )

@router.message(PaymentStates.entering_withdrawal_amount)
async def process_withdrawal_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.strip())
        if amount < MIN_WITHDRAWAL:
            await message.answer(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {MIN_WITHDRAWAL} USDT")
            return
        
        async with await get_session() as session:
            user = await session.get(User, message.from_user.id)
            
            if amount > user.balance:
                await message.answer(
                    "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ\n"
                    f"–î–æ—Å—Ç—É–ø–Ω–æ: {user.balance:.2f} USDT"
                )
                return
            
            await state.update_data(amount=amount)
            await state.set_state(PaymentStates.entering_wallet)
            
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à USDT TRC20 –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤:"
            )
            
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")

@router.message(PaymentStates.entering_wallet)
async def process_withdrawal_wallet(message: types.Message, state: FSMContext):
    wallet = message.text.strip()
    data = await state.get_data()
    amount = data['amount']
    
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CryptoBot
    # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
    async with await get_session() as session:
        user = await session.get(User, message.from_user.id)
        user.balance -= amount
        await session.commit()
        
        await message.answer(
            f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!\n"
            f"üí∞ –°—É–º–º–∞: {amount} USDT\n"
            f"üëõ –ö–æ—à–µ–ª–µ–∫: {wallet}\n\n"
            f"–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.",
            reply_markup=get_main_keyboard(message.from_user.id)
        )
    
    await state.clear()

@router.callback_query(lambda c: c.data == "cancel_payment")
async def cancel_payment(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_main_keyboard(callback.from_user.id)
    )

@router.callback_query(F.data == "balance")
async def show_balance(callback: types.CallbackQuery):
    async with get_session() as session:
        query = select(User).where(User.telegram_id == callback.from_user.id)
        result = await session.execute(query)
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", show_alert=True)
            return
        
        await callback.message.edit_text(
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance:.2f} {CRYPTO_CURRENCY}\n\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {CRYPTO_MIN_AMOUNT} {CRYPTO_CURRENCY}\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {CRYPTO_MIN_AMOUNT} {CRYPTO_CURRENCY}",
            reply_markup=get_payment_keyboard()
        )

@router.callback_query(F.data == "deposit")
async def start_deposit(callback: types.CallbackQuery, state: FSMContext):
    keyboard = [[
        types.InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="cancel_payment"
        )
    ]]
    
    await state.set_state(PaymentStates.waiting_deposit_amount)
    await callback.message.edit_text(
        f"üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–º–∏–Ω–∏–º—É–º {CRYPTO_MIN_AMOUNT} {CRYPTO_CURRENCY}):",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@router.message(PaymentStates.waiting_deposit_amount)
async def process_deposit_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.replace(",", "."))
        if amount < CRYPTO_MIN_AMOUNT:
            await message.answer(
                f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {CRYPTO_MIN_AMOUNT} {CRYPTO_CURRENCY}"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å
        invoice = await crypto_bot.create_invoice(
            amount=amount,
            description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ ROXORT SMS",
            paid_btn_name="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–æ—Ç",
            paid_btn_url=f"https://t.me/{(await message.bot.me()).username}",
            payload=f"deposit_{message.from_user.id}_{uuid.uuid4()}"
        )
        
        if "error" in invoice:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")
            return
        
        pay_url = invoice["result"]["pay_url"]
        keyboard = [
            [
                types.InlineKeyboardButton(
                    text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
                    url=pay_url
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data="cancel_payment"
                )
            ]
        ]
        
        await message.answer(
            f"üí≥ –°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞–Ω\n\n"
            f"–°—É–º–º–∞: {amount} {CRYPTO_CURRENCY}\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã")

@router.callback_query(F.data == "withdraw")
async def start_withdrawal(callback: types.CallbackQuery, state: FSMContext):
    async with get_session() as session:
        query = select(User).where(User.telegram_id == callback.from_user.id)
        result = await session.execute(query)
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", show_alert=True)
            return
        
        if user.balance < CRYPTO_MIN_AMOUNT:
            await callback.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {CRYPTO_MIN_AMOUNT} {CRYPTO_CURRENCY}",
                show_alert=True
            )
            return
        
        keyboard = [[
            types.InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="cancel_payment"
            )
        ]]
        
        await state.set_state(PaymentStates.waiting_withdrawal_amount)
        await callback.message.edit_text(
            f"üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞ (–º–∏–Ω–∏–º—É–º {CRYPTO_MIN_AMOUNT} {CRYPTO_CURRENCY}):\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ: {user.balance:.2f} {CRYPTO_CURRENCY}",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

@router.message(PaymentStates.waiting_withdrawal_amount)
async def process_withdrawal_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.replace(",", "."))
        
        async with get_session() as session:
            query = select(User).where(User.telegram_id == message.from_user.id)
            result = await session.execute(query)
            user = result.scalar_one_or_none()
            
            if not user:
                await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
                return
            
            if amount < CRYPTO_MIN_AMOUNT:
                await message.answer(
                    f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {CRYPTO_MIN_AMOUNT} {CRYPTO_CURRENCY}"
                )
                return
            
            if amount > user.balance:
                await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
                return
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            spend_id = str(uuid.uuid4())
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
            transfer = await crypto_bot.transfer(
                user_id=message.from_user.id,
                amount=amount,
                spend_id=spend_id,
                comment="–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∏–∑ ROXORT SMS"
            )
            
            if "error" in transfer:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.balance -= amount
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transaction = Transaction(
                user_id=user.telegram_id,
                type="withdrawal",
                amount=amount,
                status="completed",
                created_at=datetime.utcnow()
            )
            
            session.add(transaction)
            await session.commit()
            
            await message.answer(
                f"‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω—ã!\n"
                f"–°—É–º–º–∞: {amount} {CRYPTO_CURRENCY}"
            )
            
            await state.clear()
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã")

@router.callback_query(F.data == "cancel_payment")
async def cancel_payment(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await show_balance(callback)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç CryptoBot
async def process_crypto_payment(data: dict, headers: dict):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
        signature = headers.get("X-Crypto-Pay-Signature")
        if not signature or not crypto_bot.verify_signature(data, signature):
            logger.warning("Invalid payment signature")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
        payload = data.get("payload", "")
        if not payload.startswith("deposit_"):
            logger.warning("Invalid payment payload")
            return False
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        _, user_id, _ = payload.split("_")
        user_id = int(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É
        amount = float(data["amount"])
        
        async with get_session() as session:
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            query = select(User).where(User.telegram_id == user_id)
            result = await session.execute(query)
            user = result.scalar_one_or_none()
            
            if not user:
                logger.error(f"User {user_id} not found")
                return False
            
            user.balance += amount
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transaction = Transaction(
                user_id=user_id,
                type="deposit",
                amount=amount,
                status="completed",
                created_at=datetime.utcnow()
            )
            
            session.add(transaction)
            await session.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot = await get_bot()  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞
            await bot.send_message(
                user_id,
                f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω!\n"
                f"–°—É–º–º–∞: {amount} {CRYPTO_CURRENCY}"
            )
            
            return True
            
    except Exception as e:
        logger.error(f"Error processing crypto payment: {e}")
        return False

@router.message(lambda message: message.text == "üí∏ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞")
async def withdraw_funds(message: types.Message):
    async with async_session() as session:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            query = select(User).where(User.telegram_id == message.from_user.id)
            result = await session.execute(query)
            user = result.scalar_one_or_none()
            
            if not user:
                await message.answer(
                    "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–Ω–∞—á–∞–ª–∞.",
                    reply_markup=get_main_keyboard()
                )
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            if user.balance <= 0:
                await message.answer(
                    "‚ùå –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.\n"
                    f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance} USDT",
                    reply_markup=get_main_keyboard(message.from_user.id)
                )
                return

            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤—ã–≤–æ–¥–∞
            withdrawal = Transaction(
                buyer_id=user.telegram_id,
                seller_id=user.telegram_id,  # –≤ —Å–ª—É—á–∞–µ –≤—ã–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å —Å–æ–≤–ø–∞–¥–∞—é—Ç
                amount=user.balance,
                status="withdrawal_requested"
            )
            session.add(withdrawal)

            # –û–±–Ω—É–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            old_balance = user.balance
            user.balance = 0
            
            await session.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(
                "‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —Å–æ–∑–¥–∞–Ω!\n\n"
                f"–°—É–º–º–∞: {old_balance} USDT\n\n"
                "üìù –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤:\n"
                f"ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: #{withdrawal.id}",
                reply_markup=get_main_keyboard(message.from_user.id)
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            for admin_id in ADMIN_IDS:
                try:
                    await message.bot.send_message(
                        admin_id,
                        f"üí∏ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤!\n\n"
                        f"–û—Ç: {user.username or user.telegram_id}\n"
                        f"–°—É–º–º–∞: {old_balance} USDT\n"
                        f"ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: #{withdrawal.id}"
                    )
                except Exception as e:
                    logger.error(f"Failed to notify admin {admin_id}: {e}")

        except Exception as e:
            logger.error(f"Error in withdraw_funds: {e}")
            await session.rollback()
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=get_main_keyboard(message.from_user.id)
            )
        finally:
            await session.close() 