from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from database.db import get_session, async_session
from database.models import User, Transaction, Dispute, PhoneListing, Review
from datetime import datetime, timedelta
from sqlalchemy import select, and_, or_, func
from config import ADMIN_IDS
import logging
from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.types import Message

logger = logging.getLogger(__name__)

router = Router()

class AdminStates(StatesGroup):
    waiting_for_user_id = State()
    entering_balance = State()
    entering_announcement = State()

def get_admin_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = [
        [
            KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            KeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        ],
        [
            KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
            KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥")
        ]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

async def check_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

@router.message(lambda message: message.text == "üîë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def show_admin_panel(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_main_keyboard(message.from_user.id)
        )
        return
    
    try:
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            users_count = await session.scalar(select(func.count(User.telegram_id)))
            active_listings = await session.scalar(select(func.count(PhoneListing.id)).where(PhoneListing.is_active == True))
            open_disputes = await session.scalar(select(func.count(Dispute.id)).where(Dispute.status == "open"))
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transactions_query = select(Transaction).order_by(Transaction.created_at.desc()).limit(5)
            transactions_result = await session.execute(transactions_query)
            recent_transactions = transactions_result.scalars().all()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            response = "üîë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
            response += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            response += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
            response += f"üì± –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {active_listings}\n"
            response += f"‚ö†Ô∏è –û—Ç–∫—Ä—ã—Ç—ã—Ö —Å–ø–æ—Ä–æ–≤: {open_disputes}\n\n"
            
            if recent_transactions:
                response += "üí≥ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n"
                for tx in recent_transactions:
                    response += f"ID: {tx.id}\n"
                    response += f"–°—É–º–º–∞: {tx.amount} USDT\n"
                    response += f"–°—Ç–∞—Ç—É—Å: {tx.status}\n"
                    response += f"–î–∞—Ç–∞: {tx.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            
            await message.answer(
                response,
                reply_markup=get_admin_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_main_keyboard(message.from_user.id)
        )

@router.message(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    try:
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_volume = await session.scalar(
                select(func.sum(Transaction.amount)).where(Transaction.status == "completed")
            ) or 0
            
            completed_tx = await session.scalar(
                select(func.count(Transaction.id)).where(Transaction.status == "completed")
            ) or 0
            
            avg_rating = await session.scalar(
                select(func.avg(User.rating))
            ) or 0
            
            response = "üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            response += f"üí∞ –û–±—â–∏–π –æ–±—ä–µ–º —Å–¥–µ–ª–æ–∫: {total_volume:.2f} USDT\n"
            response += f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {completed_tx}\n"
            response += f"‚≠êÔ∏è –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.1f}\n"
            
            await message.answer(response, reply_markup=get_admin_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
            reply_markup=get_admin_keyboard()
        )

@router.message(lambda message: message.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def show_users(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    try:
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_query = select(User).order_by(User.created_at.desc()).limit(5)
            users_result = await session.execute(users_query)
            recent_users = users_result.scalars().all()
            
            response = "üë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
            for user in recent_users:
                response += f"ID: {user.telegram_id}\n"
                response += f"Username: @{user.username}\n"
                response += f"–ë–∞–ª–∞–Ω—Å: {user.balance} USDT\n"
                response += f"–†–µ–π—Ç–∏–Ω–≥: {user.rating:.1f}\n"
                response += f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            
            await message.answer(response, reply_markup=get_admin_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            reply_markup=get_admin_keyboard()
        )

@router.message(lambda message: message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard(message.from_user.id)
    )

@router.message(lambda message: message.text == "üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏")
async def manage_balance_start(message: types.Message, state: FSMContext):
    if not await check_admin(message.from_user.id):
        return
    
    await state.set_state(AdminStates.waiting_for_user_id)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )

@router.message(AdminStates.waiting_for_user_id)
async def process_user_id(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_admin_keyboard()
        )
        return
    
    try:
        user_id = int(message.text)
        async with await get_session() as session:
            user = await session.get(User, user_id)
            if not user:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            
            await state.update_data(user_id=user_id)
            await state.set_state(AdminStates.entering_balance)
            
            await message.answer(
                f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.balance} USDT\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:"
            )
    except:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")

@router.message(AdminStates.entering_balance)
async def process_new_balance(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_admin_keyboard()
        )
        return
    
    try:
        new_balance = float(message.text)
        data = await state.get_data()
        user_id = data['user_id']
        
        async with await get_session() as session:
            user = await session.get(User, user_id)
            old_balance = user.balance
            user.balance = new_balance
            await session.commit()
            
            await message.answer(
                f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
                f"–°—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å: {old_balance} USDT\n"
                f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} USDT",
                reply_markup=get_admin_keyboard()
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message.bot.send_message(
                user.telegram_id,
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
                f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} USDT"
            )
    except:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!")
    
    await state.clear()

@router.message(lambda message: message.text == "‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Ä—ã")
async def show_active_disputes(message: types.Message):
    if not await check_admin(message.from_user.id):
        return
    
    async with await get_session() as session:
        query = select(Dispute).where(Dispute.status == "open")
        result = await session.execute(query)
        disputes = result.scalars().all()
        
        if not disputes:
            await message.answer("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Ä–æ–≤ –Ω–µ—Ç!")
            return
        
        for dispute in disputes:
            transaction = await session.get(Transaction, dispute.transaction_id)
            buyer = await session.get(User, transaction.buyer_id)
            seller = await session.get(User, transaction.seller_id)
            
            await message.answer(
                f"‚ö†Ô∏è –°–ø–æ—Ä #{dispute.id}\n\n"
                f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{buyer.username or buyer.telegram_id}\n"
                f"–ü—Ä–æ–¥–∞–≤–µ—Ü: @{seller.username or seller.telegram_id}\n"
                f"–°—É–º–º–∞: {transaction.amount} USDT\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {dispute.description}\n"
                f"–°–æ–∑–¥–∞–Ω: {dispute.created_at.strftime('%d.%m.%Y %H:%M')}",
                reply_markup=get_admin_dispute_keyboard(dispute.id)
            )

@router.message(lambda message: message.text == "üì¢ –°–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def start_announcement(message: types.Message, state: FSMContext):
    if not await check_admin(message.from_user.id):
        return
    
    await state.set_state(AdminStates.entering_announcement)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )

@router.message(AdminStates.entering_announcement)
async def process_announcement(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_admin_keyboard()
        )
        return
    
    async with await get_session() as session:
        try:
            query = select(User)
            result = await session.execute(query)
            users = result.scalars().all()
            
            sent_count = 0
            failed_count = 0
            
            for user in users:
                try:
                    await message.bot.send_message(
                        user.telegram_id,
                        f"üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n{message.text}"
                    )
                    sent_count += 1
                except Exception as e:
                    logger.error(f"Failed to send announcement to user {user.telegram_id}: {e}")
                    failed_count += 1
            
            await message.answer(
                f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n"
                f"–£—Å–ø–µ—à–Ω–æ: {sent_count}\n"
                f"–û—à–∏–±–æ–∫: {failed_count}",
                reply_markup=get_admin_keyboard()
            )
            
        except Exception as e:
            logger.error(f"Error sending announcement: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.",
                reply_markup=get_admin_keyboard()
            )
    
    await state.clear()

@router.message(lambda message: message.text == "üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def block_user_start(message: types.Message, state: FSMContext):
    if not await check_admin(message.from_user.id):
        return
    
    await state.set_state(AdminStates.waiting_for_user_id)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )

@router.message(AdminStates.waiting_for_user_id)
async def process_block_user(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_admin_keyboard()
        )
        return
    
    try:
        user_id = int(message.text)
        async with await get_session() as session:
            user = await session.get(User, user_id)
            if not user:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            
            # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            user.is_blocked = not user.is_blocked
            await session.commit()
            
            status = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if user.is_blocked else "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
            await message.answer(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {status}!\n"
                f"ID: {user.telegram_id}\n"
                f"Username: @{user.username or '–ù–µ—Ç'}",
                reply_markup=get_admin_keyboard()
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message.bot.send_message(
                user.telegram_id,
                f"‚ö†Ô∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª {status} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
            
    except Exception as e:
        logger.error(f"Error blocking user: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    
    await state.clear()

@router.callback_query(lambda c: c.data.startswith("resolve_dispute_"))
async def resolve_dispute(callback: types.CallbackQuery):
    if not await check_admin(callback.from_user.id):
        return
    
    try:
        _, _, winner, dispute_id = callback.data.split("_")
        dispute_id = int(dispute_id)
        
        async with await get_session() as session:
            dispute = await session.get(Dispute, dispute_id)
            if not dispute or dispute.status != "open":
                await callback.message.edit_text("‚ùå –°–ø–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç.")
                return
            
            transaction = await session.get(Transaction, dispute.transaction_id)
            buyer = await session.get(User, transaction.buyer_id)
            seller = await session.get(User, transaction.seller_id)
            
            if winner == "buyer":
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
                buyer.balance += transaction.amount
                seller.balance -= transaction.amount
                resolution_text = "–≤ –ø–æ–ª—å–∑—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"
            else:
                # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –ø—Ä–æ–¥–∞–≤—Ü—É
                resolution_text = "–≤ –ø–æ–ª—å–∑—É –ø—Ä–æ–¥–∞–≤—Ü–∞"
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–ø–æ—Ä
            dispute.status = "resolved"
            dispute.resolved_at = datetime.utcnow()
            dispute.resolved_by = callback.from_user.id
            dispute.resolution = resolution_text
            
            await session.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            await callback.message.edit_text(
                f"‚úÖ –°–ø–æ—Ä #{dispute_id} –∑–∞–∫—Ä—ã—Ç {resolution_text}.\n"
                f"–†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{callback.from_user.username or callback.from_user.id}"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            await callback.bot.send_message(
                buyer.telegram_id,
                f"‚úÖ –°–ø–æ—Ä –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ #{transaction.id} –∑–∞–∫—Ä—ã—Ç {resolution_text}."
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
            await callback.bot.send_message(
                seller.telegram_id,
                f"‚úÖ –°–ø–æ—Ä –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ #{transaction.id} –∑–∞–∫—Ä—ã—Ç {resolution_text}."
            )
            
    except Exception as e:
        logger.error(f"Error resolving dispute: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–ø–æ—Ä–∞.")

@router.message(lambda message: message.text == "‚ùå –í—ã–π—Ç–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∞")
async def exit_admin_panel(message: types.Message):
    if not await check_admin(message.from_user.id):
        return
    
    from handlers.common import get_main_keyboard
    await message.answer(
        "üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=get_main_keyboard()
    )

async def cmd_admin(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await message.answer(
        "üîë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/users - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
        "/announce - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n"
        "/block - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/unblock - –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )

def register_admin_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    dp.message.register(cmd_admin, Command("admin"))
    dp.include_router(router) 