from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from database.db import async_session
from database.models import User, Transaction, Dispute, PhoneListing, Review, PromoCode
from datetime import datetime, timedelta
from sqlalchemy import select, func, and_, or_
import logging
from config import ADMIN_IDS
from handlers.common import get_main_keyboard
from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.types import Message

logger = logging.getLogger(__name__)

router = Router()

class AdminStates(StatesGroup):
    selecting_user = State()
    entering_amount = State()
    entering_message = State()
    selecting_listing = State()
    creating_promo = State()
    entering_promo_code = State()

def get_admin_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = [
        [
            KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            KeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        ],
        [
            KeyboardButton(text="üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏"),
            KeyboardButton(text="‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Ä—ã")
        ],
        [
            KeyboardButton(text="üì¢ –°–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"),
            KeyboardButton(text="üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        ],
        [
            KeyboardButton(text="üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏"),
            KeyboardButton(text="‚ùå –í—ã–π—Ç–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∞")
        ]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

async def check_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

@router.message(F.text == "üîë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def show_admin_panel(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_main_keyboard(message.from_user.id)
        )
        return
    
    try:
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            users_count = await session.scalar(select(func.count(User.telegram_id)))
            active_listings = await session.scalar(select(func.count(PhoneListing.id)).where(PhoneListing.is_active == True))
            open_disputes = await session.scalar(select(func.count(Dispute.id)).where(Dispute.status == "open"))
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transactions_query = select(Transaction).order_by(Transaction.created_at.desc()).limit(5)
            transactions_result = await session.execute(transactions_query)
            recent_transactions = transactions_result.scalars().all()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            response = "üîë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
            response += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            response += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
            response += f"üì± –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {active_listings}\n"
            response += f"‚ö†Ô∏è –û—Ç–∫—Ä—ã—Ç—ã—Ö —Å–ø–æ—Ä–æ–≤: {open_disputes}\n\n"
            
            if recent_transactions:
                response += "üí≥ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n"
                for tx in recent_transactions:
                    response += f"ID: {tx.id}\n"
                    response += f"–°—É–º–º–∞: {tx.amount} USDT\n"
                    response += f"–°—Ç–∞—Ç—É—Å: {tx.status}\n"
                    response += f"–î–∞—Ç–∞: {tx.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            
            await message.answer(
                response,
                reply_markup=get_admin_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_main_keyboard(message.from_user.id)
        )

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    try:
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_volume = await session.scalar(
                select(func.sum(Transaction.amount)).where(Transaction.status == "completed")
            ) or 0
            
            completed_tx = await session.scalar(
                select(func.count(Transaction.id)).where(Transaction.status == "completed")
            ) or 0
            
            avg_rating = await session.scalar(
                select(func.avg(User.rating))
            ) or 0
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            day_ago = datetime.utcnow() - timedelta(days=1)
            new_users = await session.scalar(
                select(func.count(User.telegram_id)).where(User.created_at >= day_ago)
            ) or 0
            
            new_transactions = await session.scalar(
                select(func.count(Transaction.id)).where(Transaction.created_at >= day_ago)
            ) or 0
            
            platform_earnings = total_volume * (5 / 100) if total_volume else 0
            
            response = "üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            response += f"üí∞ –û–±—â–∏–π –æ–±—ä–µ–º —Å–¥–µ–ª–æ–∫: {total_volume:.2f} USDT\n"
            response += f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {completed_tx}\n"
            response += f"‚≠êÔ∏è –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.1f}\n"
            response += f"üÜï –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ 24—á: {new_users}\n"
            response += f"üí≥ –ù–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫ –∑–∞ 24—á: {new_transactions}\n"
            response += f"üìà –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: {platform_earnings:.2f} USDT"
            
            await message.answer(response, reply_markup=get_admin_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
            reply_markup=get_admin_keyboard()
        )

@router.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def show_users(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    try:
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_query = select(User).order_by(User.created_at.desc()).limit(10)
            users_result = await session.execute(users_query)
            recent_users = users_result.scalars().all()
            
            response = "üë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
            for user in recent_users:
                response += f"ID: {user.telegram_id}\n"
                response += f"Username: @{user.username or '–ù–µ—Ç'}\n"
                response += f"–ë–∞–ª–∞–Ω—Å: {user.balance} USDT\n"
                response += f"–†–µ–π—Ç–∏–Ω–≥: ‚≠êÔ∏è {user.rating:.1f}\n"
                response += f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                response += "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            
            await message.answer(response, reply_markup=get_admin_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            reply_markup=get_admin_keyboard()
        )

@router.message(F.text == "üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏")
async def manage_balances(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞–º–∏"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    try:
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö –±–∞–ª–∞–Ω—Å–∞–º–∏
            users_query = select(User).order_by(User.balance.desc()).limit(10)
            users_result = await session.execute(users_query)
            users = users_result.scalars().all()
            
            keyboard = []
            for user in users:
                keyboard.append([InlineKeyboardButton(
                    text=f"üë§ @{user.username or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} | üí∞ {user.balance} USDT",
                    callback_data=f"manage_balance:{user.telegram_id}"
                )])
            
            keyboard.append([InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="cancel_admin_action"
            )])
            
            await state.set_state(AdminStates.selecting_user)
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            reply_markup=get_admin_keyboard()
        )

@router.callback_query(lambda c: c.data.startswith("manage_balance:"))
async def process_user_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º"""
    user_id = int(callback.data.split(":")[1])
    await state.update_data(user_id=user_id)
    await state.set_state(AdminStates.entering_amount)
    
    keyboard = [
        [InlineKeyboardButton(text="‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="balance_action:add")],
        [InlineKeyboardButton(text="‚ûñ –°–ø–∏—Å–∞—Ç—å", callback_data="balance_action:subtract")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_admin_action")]
    ]
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@router.callback_query(lambda c: c.data.startswith("balance_action:"))
async def process_balance_action(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–ª–∞–Ω—Å–æ–º"""
    action = callback.data.split(":")[1]
    await state.update_data(action=action)
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ USDT:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="cancel_admin_action"
        )]])
    )

@router.message(AdminStates.entering_amount)
async def process_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—É–º–º—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError("Amount must be positive")
        
        data = await state.get_data()
        user_id = data['user_id']
        action = data['action']
        
        async with async_session() as session:
            user = await session.get(User, user_id)
            if not user:
                await message.answer(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=get_admin_keyboard()
                )
                return
            
            if action == "subtract" and user.balance < amount:
                await message.answer(
                    "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                    reply_markup=get_admin_keyboard()
                )
                return
            
            # –ò–∑–º–µ–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
            if action == "add":
                user.balance += amount
            else:
                user.balance -= amount
            
            await session.commit()
            
            await message.answer(
                f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ {'–ø–æ–ø–æ–ª–Ω–µ–Ω' if action == 'add' else '—Å–ø–∏—Å–∞–Ω'} –Ω–∞ {amount} USDT\n"
                f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance} USDT",
                reply_markup=get_admin_keyboard()
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await message.bot.send_message(
                    user_id,
                    f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª {'–ø–æ–ø–æ–ª–Ω–µ–Ω' if action == 'add' else '—Å–ø–∏—Å–∞–Ω'} –Ω–∞ {amount} USDT\n"
                    f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance} USDT"
                )
            except Exception as e:
                logger.error(f"Failed to notify user {user_id} about balance change: {e}")
                
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=get_admin_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in process_amount: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.",
            reply_markup=get_admin_keyboard()
        )
    
    await state.clear()

@router.message(F.text == "‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Ä—ã")
async def show_active_disputes(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Ä—ã"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    try:
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Ä—ã
            disputes_query = select(Dispute).where(
                Dispute.status == "open"
            ).order_by(Dispute.created_at.desc())
            
            result = await session.execute(disputes_query)
            disputes = result.scalars().all()
            
            if not disputes:
                await message.answer(
                    "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Ä–æ–≤.",
                    reply_markup=get_admin_keyboard()
                )
                return
            
            response = "‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Ä—ã:\n\n"
            for dispute in disputes:
                transaction = await session.get(Transaction, dispute.transaction_id)
                buyer = await session.get(User, transaction.buyer_id)
                seller = await session.get(User, transaction.seller_id)
                
                response += f"ID —Å–ø–æ—Ä–∞: {dispute.id}\n"
                response += f"–°—É–º–º–∞: {transaction.amount} USDT\n"
                response += f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{buyer.username or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n"
                response += f"–ü—Ä–æ–¥–∞–≤–µ—Ü: @{seller.username or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n"
                response += f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {dispute.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                response += "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            
            await message.answer(response, reply_markup=get_admin_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Ä–æ–≤: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Å–ø–æ—Ä–æ–≤.",
            reply_markup=get_admin_keyboard()
        )

@router.message(F.text == "üì¢ –°–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def start_announcement(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    await state.set_state(AdminStates.entering_message)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="cancel_admin_action"
        )]])
    )

@router.message(AdminStates.entering_message)
async def process_announcement(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    try:
        announcement_text = message.text.strip()
        
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_query = select(User.telegram_id)
            users_result = await session.execute(users_query)
            users = users_result.scalars().all()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            success_count = 0
            fail_count = 0
            
            for user_id in users:
                try:
                    await message.bot.send_message(
                        user_id,
                        f"üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{announcement_text}"
                    )
                    success_count += 1
                except Exception as e:
                    logger.error(f"Failed to send announcement to user {user_id}: {e}")
                    fail_count += 1
            
            await message.answer(
                f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n"
                f"–£—Å–ø–µ—à–Ω–æ: {success_count}\n"
                f"–û—à–∏–±–æ–∫: {fail_count}",
                reply_markup=get_admin_keyboard()
            )
            
    except Exception as e:
        logger.error(f"Error in process_announcement: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.",
            reply_markup=get_admin_keyboard()
        )
    
    await state.clear()

@router.message(F.text == "üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def start_user_block(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    try:
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_query = select(User).order_by(User.created_at.desc()).limit(10)
            users_result = await session.execute(users_query)
            users = users_result.scalars().all()
            
            keyboard = []
            for user in users:
                status = "üîí" if user.is_blocked else "‚úÖ"
                keyboard.append([InlineKeyboardButton(
                    text=f"{status} @{user.username or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} | ID: {user.telegram_id}",
                    callback_data=f"block_user:{user.telegram_id}"
                )])
            
            keyboard.append([InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="cancel_admin_action"
            )])
            
            await state.set_state(AdminStates.selecting_user)
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            reply_markup=get_admin_keyboard()
        )

@router.callback_query(lambda c: c.data.startswith("block_user:"))
async def process_user_block(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = int(callback.data.split(":")[1])
        
        async with async_session() as session:
            user = await session.get(User, user_id)
            if not user:
                await callback.message.edit_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(
                        text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                        callback_data="cancel_admin_action"
                    )]])
                )
                return
            
            # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            user.is_blocked = not user.is_blocked
            await session.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await callback.message.bot.send_message(
                    user_id,
                    f"üîí –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª {'–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if user.is_blocked else '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )
            except Exception as e:
                logger.error(f"Failed to notify user {user_id} about block status: {e}")
            
            await callback.message.edit_text(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ {'–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if user.is_blocked else '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}.",
                reply_markup=get_admin_keyboard()
            )
            
    except Exception as e:
        logger.error(f"Error in process_user_block: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.",
            reply_markup=get_admin_keyboard()
        )

@router.message(F.text == "‚ùå –í—ã–π—Ç–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∞")
async def exit_admin_panel(message: types.Message):
    """–í—ã—Ö–æ–¥ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if message.from_user.id not in ADMIN_IDS:
        return
    
    await message.answer(
        "–í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        reply_markup=get_main_keyboard(message.from_user.id)
    )

@router.callback_query(lambda c: c.data == "cancel_admin_action")
async def cancel_admin_action(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_admin_keyboard()
    )

@router.callback_query(lambda c: c.data == "promo_codes")
async def show_promo_menu(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="create_promo")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤", callback_data="list_promos")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
    ])
    
    await callback.message.edit_text(
        "üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@router.callback_query(lambda c: c.data == "create_promo")
async def start_create_promo(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.creating_promo)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ ROXY:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_promo")
        ]])
    )

@router.message(AdminStates.creating_promo)
async def process_promo_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
        
        await state.update_data(promo_amount=amount)
        await state.set_state(AdminStates.entering_promo_code)
        
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: SUMMER2024):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_promo")
            ]])
        )
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10.5):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_promo")
            ]])
        )

@router.message(AdminStates.entering_promo_code)
async def process_promo_code(message: types.Message, state: FSMContext):
    code = message.text.upper()
    
    async with async_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥
        existing = await session.scalar(
            select(PromoCode).where(PromoCode.code == code)
        )
        
        if existing:
            await message.answer(
                "‚ùå –¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_promo")
                ]])
            )
            return
    
    data = await state.get_data()
    amount = data['promo_amount']
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    promo = PromoCode(
        code=code,
        amount=amount,
        created_by=message.from_user.id
    )
    
    async with async_session() as session:
        session.add(promo)
        await session.commit()
    
    await state.clear()
    await message.answer(
        f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
        f"–ö–æ–¥: {code}\n"
        f"–°—É–º–º–∞: {amount} ROXY",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="promo_codes")
        ]])
    )

@router.callback_query(lambda c: c.data == "list_promos")
async def show_promos(callback: types.CallbackQuery):
    async with async_session() as session:
        promos = await session.scalars(
            select(PromoCode).order_by(PromoCode.created_at.desc())
        )
        promos = promos.all()
        
        if not promos:
            await callback.message.edit_text(
                "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø—É—Å—Ç.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="promo_codes")
                ]])
            )
            return
        
        text = "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:\n\n"
        for promo in promos:
            status = "‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω" if promo.is_used else "üÜï –ê–∫—Ç–∏–≤–µ–Ω"
            used_by = f"\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: @{promo.used_by}" if promo.used_by else ""
            text += f"–ö–æ–¥: {promo.code}\n–°—É–º–º–∞: {promo.amount} ROXY\n{status}{used_by}\n\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="promo_codes")
            ]])
        )

@router.callback_query(lambda c: c.data == "cancel_promo")
async def cancel_promo(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await show_promo_menu(callback)

def register_admin_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    dp.include_router(router)

async def cmd_admin(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await message.answer(
        "üîë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/users - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
        "/announce - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n"
        "/block - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/unblock - –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )

    dp.message.register(cmd_admin, Command("admin")) 